# coding=utf-8
# --------------------------------------------------------------------------
# Code generated by Microsoft (R) AutoRest Code Generator (autorest: 3.1.3, generator: {generator})
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
from typing import Any, Dict, IO, Optional

from azure.core.pipeline.transport._base import _format_url_section
from azure.core.rest import HttpRequest
from msrest import Serializer

_SERIALIZER = Serializer()


def build_get_all_resumes_request(
    *,
    limit: Optional[int] = 300,
    offset: Optional[int] = None,
    **kwargs: Any
) -> HttpRequest:
    """Gets summary information for all resumes of a user.

    Returns all the resume summaries for that user, limited to 300 per page.

    See https://aka.ms/azsdk/python/protocol/quickstart for how to incorporate this request builder
    into your code flow.

    :keyword limit: The numbers of documents to return, defaults to 300.
    :paramtype limit: int
    :keyword offset: The number of documents to skip before starting to collect the result set.
    :paramtype offset: int
    :return: Returns an :class:`~azure.core.rest.HttpRequest` that you will pass to the client's
     `send_request` method. See https://aka.ms/azsdk/python/protocol/quickstart for how to
     incorporate this response into your code flow.
    :rtype: ~azure.core.rest.HttpRequest
    """

    accept = "application/json"
    # Construct URL
    url = kwargs.pop("template_url", '/resumes')

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    if limit is not None:
        query_parameters['limit'] = _SERIALIZER.query("limit", limit, 'int', minimum=1)
    if offset is not None:
        query_parameters['offset'] = _SERIALIZER.query("offset", offset, 'int', minimum=0)

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=url,
        params=query_parameters,
        headers=header_parameters,
        **kwargs
    )


def build_create_resume_request(
    *,
    files: Optional[Dict[str, Any]] = None,
    data: Optional[Dict[str, Any]] = None,
    content: Any = None,
    **kwargs: Any
) -> HttpRequest:
    """Uploads a resume for parsing.

    Uploads a resume for parsing.
    When successful, returns an ``identifier`` in the response for subsequent use with the
    `/resumes/{identifier} <#operation/getResume>`_ endpoint to check processing status and
    retrieve results.

    See https://aka.ms/azsdk/python/protocol/quickstart for how to incorporate this request builder
    into your code flow.

    :keyword files: Multipart input for files. See the template in our example to find the input
     shape. File as binary data blob.
    :paramtype files: dict[str, any]
    :keyword data: Pass in dictionary that contains form data to include in the body of the
     request. File as binary data blob.
    :paramtype data: dict[str, any]
    :keyword content: Pass in binary content you want in the body of the request (typically bytes,
     a byte iterator, or stream input). File as binary data blob.
    :paramtype content: any
    :return: Returns an :class:`~azure.core.rest.HttpRequest` that you will pass to the client's
     `send_request` method. See https://aka.ms/azsdk/python/protocol/quickstart for how to
     incorporate this response into your code flow.
    :rtype: ~azure.core.rest.HttpRequest
    """

    content_type = kwargs.pop('content_type', None)  # type: Optional[str]

    accept = "application/json"
    # Construct URL
    url = kwargs.pop("template_url", '/resumes')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    if content_type is not None:
        header_parameters['Content-Type'] = _SERIALIZER.header("content_type", content_type, 'str')
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="POST",
        url=url,
        headers=header_parameters,
        files=files,
        data=data,
        content=content,
        **kwargs
    )


def build_get_resume_request(
    identifier: str,
    **kwargs: Any
) -> HttpRequest:
    """Gets parse results for a specific resume.

    Returns all the parse results for that resume if processing is completed.
    The ``identifier`` is the unique ID returned after POST-ing the resume via the `/resumes
    <#operation/createResume>`_ endpoint.

    See https://aka.ms/azsdk/python/protocol/quickstart for how to incorporate this request builder
    into your code flow.

    :param identifier: Document identifier.
    :type identifier: str
    :return: Returns an :class:`~azure.core.rest.HttpRequest` that you will pass to the client's
     `send_request` method. See https://aka.ms/azsdk/python/protocol/quickstart for how to
     incorporate this response into your code flow.
    :rtype: ~azure.core.rest.HttpRequest
    """

    accept = "application/json"
    # Construct URL
    url = kwargs.pop("template_url", '/resumes/{identifier}')
    path_format_arguments = {
        'identifier': _SERIALIZER.url("identifier", identifier, 'str'),
    }
    url = _format_url_section(url, **path_format_arguments)

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=url,
        headers=header_parameters,
        **kwargs
    )


def build_delete_resume_request(
    identifier: str,
    **kwargs: Any
) -> HttpRequest:
    """Deletes a resume.

    Deletes the specified resume from the database.

    See https://aka.ms/azsdk/python/protocol/quickstart for how to incorporate this request builder
    into your code flow.

    :param identifier: Resume identifier.
    :type identifier: str
    :return: Returns an :class:`~azure.core.rest.HttpRequest` that you will pass to the client's
     `send_request` method. See https://aka.ms/azsdk/python/protocol/quickstart for how to
     incorporate this response into your code flow.
    :rtype: ~azure.core.rest.HttpRequest
    """

    accept = "application/json"
    # Construct URL
    url = kwargs.pop("template_url", '/resumes/{identifier}')
    path_format_arguments = {
        'identifier': _SERIALIZER.url("identifier", identifier, 'str'),
    }
    url = _format_url_section(url, **path_format_arguments)

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="DELETE",
        url=url,
        headers=header_parameters,
        **kwargs
    )


def build_get_all_redacted_resumes_request(
    *,
    limit: Optional[int] = 300,
    offset: Optional[int] = None,
    **kwargs: Any
) -> HttpRequest:
    """Gets summary information for all redacted resumes of a user.

    Returns all the redacted resume information for that resume.

    See https://aka.ms/azsdk/python/protocol/quickstart for how to incorporate this request builder
    into your code flow.

    :keyword limit: The numbers of documents to return, defaults to 300.
    :paramtype limit: int
    :keyword offset: The number of documents to skip before starting to collect the result set.
    :paramtype offset: int
    :return: Returns an :class:`~azure.core.rest.HttpRequest` that you will pass to the client's
     `send_request` method. See https://aka.ms/azsdk/python/protocol/quickstart for how to
     incorporate this response into your code flow.
    :rtype: ~azure.core.rest.HttpRequest
    """

    accept = "application/json"
    # Construct URL
    url = kwargs.pop("template_url", '/redacted_resumes')

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    if limit is not None:
        query_parameters['limit'] = _SERIALIZER.query("limit", limit, 'int', minimum=1)
    if offset is not None:
        query_parameters['offset'] = _SERIALIZER.query("offset", offset, 'int', minimum=0)

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=url,
        params=query_parameters,
        headers=header_parameters,
        **kwargs
    )


def build_create_redacted_resume_request(
    *,
    files: Optional[Dict[str, Any]] = None,
    data: Optional[Dict[str, Any]] = None,
    content: Any = None,
    **kwargs: Any
) -> HttpRequest:
    """Uploads a resume for redacting.

    Uploads a resume for redacting.
    When successful, returns an ``identifier`` in the response for subsequent use with the
    `/redacted_resumes/{identifier} <#operation/getRedactedResume>`_ endpoint to check processing
    status and retrieve results.

    See https://aka.ms/azsdk/python/protocol/quickstart for how to incorporate this request builder
    into your code flow.

    :keyword files: Multipart input for files. See the template in our example to find the input
     shape. File as binary data blob.
    :paramtype files: dict[str, any]
    :keyword data: Pass in dictionary that contains form data to include in the body of the
     request. File as binary data blob.
    :paramtype data: dict[str, any]
    :keyword content: Pass in binary content you want in the body of the request (typically bytes,
     a byte iterator, or stream input). File as binary data blob.
    :paramtype content: any
    :return: Returns an :class:`~azure.core.rest.HttpRequest` that you will pass to the client's
     `send_request` method. See https://aka.ms/azsdk/python/protocol/quickstart for how to
     incorporate this response into your code flow.
    :rtype: ~azure.core.rest.HttpRequest
    """

    content_type = kwargs.pop('content_type', None)  # type: Optional[str]

    accept = "application/json"
    # Construct URL
    url = kwargs.pop("template_url", '/redacted_resumes')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    if content_type is not None:
        header_parameters['Content-Type'] = _SERIALIZER.header("content_type", content_type, 'str')
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="POST",
        url=url,
        headers=header_parameters,
        files=files,
        data=data,
        content=content,
        **kwargs
    )


def build_get_redacted_resume_request(
    identifier: str,
    **kwargs: Any
) -> HttpRequest:
    """Gets redaction results for a specific resume.

    Returns all the redaction results for that resume if processing is completed.
    The ``identifier`` is the unique ID returned after POST-ing the resume via the
    `/redacted_resumes <#operation/createRedactedResume>`_ endpoint.

    See https://aka.ms/azsdk/python/protocol/quickstart for how to incorporate this request builder
    into your code flow.

    :param identifier: Document identifier.
    :type identifier: str
    :return: Returns an :class:`~azure.core.rest.HttpRequest` that you will pass to the client's
     `send_request` method. See https://aka.ms/azsdk/python/protocol/quickstart for how to
     incorporate this response into your code flow.
    :rtype: ~azure.core.rest.HttpRequest
    """

    accept = "application/json"
    # Construct URL
    url = kwargs.pop("template_url", '/redacted_resumes/{identifier}')
    path_format_arguments = {
        'identifier': _SERIALIZER.url("identifier", identifier, 'str'),
    }
    url = _format_url_section(url, **path_format_arguments)

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=url,
        headers=header_parameters,
        **kwargs
    )


def build_delete_redacted_resume_request(
    identifier: str,
    **kwargs: Any
) -> HttpRequest:
    """Deletes a redacted resume.

    Deletes the specified resume from the database.

    See https://aka.ms/azsdk/python/protocol/quickstart for how to incorporate this request builder
    into your code flow.

    :param identifier: Document identifier.
    :type identifier: str
    :return: Returns an :class:`~azure.core.rest.HttpRequest` that you will pass to the client's
     `send_request` method. See https://aka.ms/azsdk/python/protocol/quickstart for how to
     incorporate this response into your code flow.
    :rtype: ~azure.core.rest.HttpRequest
    """

    accept = "application/json"
    # Construct URL
    url = kwargs.pop("template_url", '/redacted_resumes/{identifier}')
    path_format_arguments = {
        'identifier': _SERIALIZER.url("identifier", identifier, 'str'),
    }
    url = _format_url_section(url, **path_format_arguments)

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="DELETE",
        url=url,
        headers=header_parameters,
        **kwargs
    )


def build_get_all_resume_formats_request(
    *,
    limit: Optional[int] = 300,
    offset: Optional[int] = None,
    **kwargs: Any
) -> HttpRequest:
    """Gets summary information for all resume formats of a user.

    Returns all the resume formats.

    See https://aka.ms/azsdk/python/protocol/quickstart for how to incorporate this request builder
    into your code flow.

    :keyword limit: The numbers of documents to return, defaults to 300.
    :paramtype limit: int
    :keyword offset: The number of documents to skip before starting to collect the result set.
    :paramtype offset: int
    :return: Returns an :class:`~azure.core.rest.HttpRequest` that you will pass to the client's
     `send_request` method. See https://aka.ms/azsdk/python/protocol/quickstart for how to
     incorporate this response into your code flow.
    :rtype: ~azure.core.rest.HttpRequest
    """

    accept = "application/json"
    # Construct URL
    url = kwargs.pop("template_url", '/resume_formats')

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    if limit is not None:
        query_parameters['limit'] = _SERIALIZER.query("limit", limit, 'int', minimum=1)
    if offset is not None:
        query_parameters['offset'] = _SERIALIZER.query("offset", offset, 'int', minimum=0)

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=url,
        params=query_parameters,
        headers=header_parameters,
        **kwargs
    )


def build_get_all_reformatted_resumes_request(
    *,
    limit: Optional[int] = 300,
    offset: Optional[int] = None,
    **kwargs: Any
) -> HttpRequest:
    """Gets summary information for all reformatted resumes of a user.

    Returns all the reformatted resume information for that resume.

    See https://aka.ms/azsdk/python/protocol/quickstart for how to incorporate this request builder
    into your code flow.

    :keyword limit: The numbers of documents to return, defaults to 300.
    :paramtype limit: int
    :keyword offset: The number of documents to skip before starting to collect the result set.
    :paramtype offset: int
    :return: Returns an :class:`~azure.core.rest.HttpRequest` that you will pass to the client's
     `send_request` method. See https://aka.ms/azsdk/python/protocol/quickstart for how to
     incorporate this response into your code flow.
    :rtype: ~azure.core.rest.HttpRequest
    """

    accept = "application/json"
    # Construct URL
    url = kwargs.pop("template_url", '/reformatted_resumes')

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    if limit is not None:
        query_parameters['limit'] = _SERIALIZER.query("limit", limit, 'int', minimum=1)
    if offset is not None:
        query_parameters['offset'] = _SERIALIZER.query("offset", offset, 'int', minimum=0)

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=url,
        params=query_parameters,
        headers=header_parameters,
        **kwargs
    )


def build_create_reformatted_resume_request(
    *,
    files: Optional[Dict[str, Any]] = None,
    data: Optional[Dict[str, Any]] = None,
    content: Any = None,
    **kwargs: Any
) -> HttpRequest:
    """Uploads a resume for reformatting.

    Uploads a resume for reformatting.
    When successful, returns an ``identifier`` in the response for subsequent use with the
    `/reformatted_resumes/{identifier} <#operation/getReformattedResume>`_ endpoint to check
    processing status and retrieve results.

    See https://aka.ms/azsdk/python/protocol/quickstart for how to incorporate this request builder
    into your code flow.

    :keyword files: Multipart input for files. See the template in our example to find the input
     shape. File as binary data blob.
    :paramtype files: dict[str, any]
    :keyword data: Pass in dictionary that contains form data to include in the body of the
     request. File as binary data blob.
    :paramtype data: dict[str, any]
    :keyword content: Pass in binary content you want in the body of the request (typically bytes,
     a byte iterator, or stream input). File as binary data blob.
    :paramtype content: any
    :return: Returns an :class:`~azure.core.rest.HttpRequest` that you will pass to the client's
     `send_request` method. See https://aka.ms/azsdk/python/protocol/quickstart for how to
     incorporate this response into your code flow.
    :rtype: ~azure.core.rest.HttpRequest
    """

    content_type = kwargs.pop('content_type', None)  # type: Optional[str]

    accept = "application/json"
    # Construct URL
    url = kwargs.pop("template_url", '/reformatted_resumes')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    if content_type is not None:
        header_parameters['Content-Type'] = _SERIALIZER.header("content_type", content_type, 'str')
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="POST",
        url=url,
        headers=header_parameters,
        files=files,
        data=data,
        content=content,
        **kwargs
    )


def build_get_reformatted_resume_request(
    identifier: str,
    **kwargs: Any
) -> HttpRequest:
    """Gets reformatting results for a specific resume.

    Returns all the reformatting results for that resume if processing is completed.
    The ``identifier`` is the unique ID returned after POST-ing the resume via the
    `/reformatted_resumes <#operation/createReformattedResume>`_ endpoint.

    See https://aka.ms/azsdk/python/protocol/quickstart for how to incorporate this request builder
    into your code flow.

    :param identifier: Document identifier.
    :type identifier: str
    :return: Returns an :class:`~azure.core.rest.HttpRequest` that you will pass to the client's
     `send_request` method. See https://aka.ms/azsdk/python/protocol/quickstart for how to
     incorporate this response into your code flow.
    :rtype: ~azure.core.rest.HttpRequest
    """

    accept = "application/json"
    # Construct URL
    url = kwargs.pop("template_url", '/reformatted_resumes/{identifier}')
    path_format_arguments = {
        'identifier': _SERIALIZER.url("identifier", identifier, 'str'),
    }
    url = _format_url_section(url, **path_format_arguments)

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=url,
        headers=header_parameters,
        **kwargs
    )


def build_delete_reformatted_resume_request(
    identifier: str,
    **kwargs: Any
) -> HttpRequest:
    """Deletes a reformatted resume.

    Deletes the specified resume from the database.

    See https://aka.ms/azsdk/python/protocol/quickstart for how to incorporate this request builder
    into your code flow.

    :param identifier: Document identifier.
    :type identifier: str
    :return: Returns an :class:`~azure.core.rest.HttpRequest` that you will pass to the client's
     `send_request` method. See https://aka.ms/azsdk/python/protocol/quickstart for how to
     incorporate this response into your code flow.
    :rtype: ~azure.core.rest.HttpRequest
    """

    accept = "application/json"
    # Construct URL
    url = kwargs.pop("template_url", '/reformatted_resumes/{identifier}')
    path_format_arguments = {
        'identifier': _SERIALIZER.url("identifier", identifier, 'str'),
    }
    url = _format_url_section(url, **path_format_arguments)

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="DELETE",
        url=url,
        headers=header_parameters,
        **kwargs
    )

