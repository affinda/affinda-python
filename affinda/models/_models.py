# coding=utf-8
# --------------------------------------------------------------------------
# Code generated by Microsoft (R) AutoRest Code Generator (autorest: 3.1.3, generator: {generator})
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from azure.core.exceptions import HttpResponseError
import msrest.serialization


class Error(msrest.serialization.Model):
    """Error.

    :keyword error_code:
    :paramtype error_code: str
    :keyword error_detail:
    :paramtype error_detail: str
    """

    _attribute_map = {
        "error_code": {"key": "errorCode", "type": "str"},
        "error_detail": {"key": "errorDetail", "type": "str"},
    }

    def __init__(self, **kwargs):
        super(Error, self).__init__(**kwargs)
        self.error_code = kwargs.get("error_code", None)
        self.error_detail = kwargs.get("error_detail", None)


class Get200ApplicationJsonPropertiesItemsItem(msrest.serialization.Model):
    """Get200ApplicationJsonPropertiesItemsItem.

    All required parameters must be populated in order to send to Azure.

    :keyword identifier: Required. Unique identifier for the resume. If creating a document and
     left blank, one will be automatically generated.
    :paramtype identifier: str
    :keyword format_file: Required. The template to apply.
    :paramtype format_file: str
    """

    _validation = {
        "identifier": {"required": True},
        "format_file": {"required": True},
    }

    _attribute_map = {
        "identifier": {"key": "identifier", "type": "str"},
        "format_file": {"key": "formatFile", "type": "str"},
    }

    def __init__(self, **kwargs):
        super(Get200ApplicationJsonPropertiesItemsItem, self).__init__(**kwargs)
        self.identifier = kwargs["identifier"]
        self.format_file = kwargs["format_file"]


class GetAllDocumentsResults(msrest.serialization.Model):
    """GetAllDocumentsResults.

    :keyword count:
    :paramtype count: int
    :keyword next:
    :paramtype next: str
    :keyword previous:
    :paramtype previous: str
    :keyword results:
    :paramtype results: list[~affinda.models.Meta]
    """

    _attribute_map = {
        "count": {"key": "count", "type": "int"},
        "next": {"key": "next", "type": "str"},
        "previous": {"key": "previous", "type": "str"},
        "results": {"key": "results", "type": "[Meta]"},
    }

    def __init__(self, **kwargs):
        super(GetAllDocumentsResults, self).__init__(**kwargs)
        self.count = kwargs.get("count", None)
        self.next = kwargs.get("next", None)
        self.previous = kwargs.get("previous", None)
        self.results = kwargs.get("results", None)


class Location(msrest.serialization.Model):
    """Location.

    All required parameters must be populated in order to send to Azure.

    :keyword formatted:
    :paramtype formatted: str
    :keyword postal_code:
    :paramtype postal_code: str
    :keyword state:
    :paramtype state: str
    :keyword country:
    :paramtype country: str
    :keyword raw_input: Required.
    :paramtype raw_input: str
    :keyword street_number:
    :paramtype street_number: str
    :keyword street:
    :paramtype street: str
    :keyword apartment_number:
    :paramtype apartment_number: str
    :keyword city:
    :paramtype city: str
    """

    _validation = {
        "raw_input": {"required": True},
    }

    _attribute_map = {
        "formatted": {"key": "formatted", "type": "str"},
        "postal_code": {"key": "postalCode", "type": "str"},
        "state": {"key": "state", "type": "str"},
        "country": {"key": "country", "type": "str"},
        "raw_input": {"key": "rawInput", "type": "str"},
        "street_number": {"key": "streetNumber", "type": "str"},
        "street": {"key": "street", "type": "str"},
        "apartment_number": {"key": "apartmentNumber", "type": "str"},
        "city": {"key": "city", "type": "str"},
    }

    def __init__(self, **kwargs):
        super(Location, self).__init__(**kwargs)
        self.formatted = kwargs.get("formatted", None)
        self.postal_code = kwargs.get("postal_code", None)
        self.state = kwargs.get("state", None)
        self.country = kwargs.get("country", None)
        self.raw_input = kwargs["raw_input"]
        self.street_number = kwargs.get("street_number", None)
        self.street = kwargs.get("street", None)
        self.apartment_number = kwargs.get("apartment_number", None)
        self.city = kwargs.get("city", None)


class Meta(msrest.serialization.Model):
    """Meta.

    All required parameters must be populated in order to send to Azure.

    :keyword identifier: Required. Unique identifier for the resume. If creating a document and
     left blank, one will be automatically generated.
    :paramtype identifier: str
    :keyword file_name: Optional filename of the file.
    :paramtype file_name: str
    :keyword ready: Required. If true, the document has finished processing. Particularly useful if
     an endpoint request specified wait=False, when polling use this variable to determine when to
     stop polling.
    :paramtype ready: bool
    :keyword ready_dt: The datetime when the document was ready.
    :paramtype ready_dt: ~datetime.datetime
    :keyword failed: Required. If true, some exception was raised during processing. Check the
     'error' field of the main return object.
    :paramtype failed: bool
    :keyword expiry_time: The date/time in ISO-8601 format when the resume will be automatically
     deleted.  Defaults to no expiry.
    :paramtype expiry_time: str
    """

    _validation = {
        "identifier": {"required": True},
        "ready": {"required": True},
        "failed": {"required": True},
    }

    _attribute_map = {
        "identifier": {"key": "identifier", "type": "str"},
        "file_name": {"key": "fileName", "type": "str"},
        "ready": {"key": "ready", "type": "bool"},
        "ready_dt": {"key": "readyDt", "type": "iso-8601"},
        "failed": {"key": "failed", "type": "bool"},
        "expiry_time": {"key": "expiryTime", "type": "str"},
    }

    def __init__(self, **kwargs):
        super(Meta, self).__init__(**kwargs)
        self.identifier = kwargs["identifier"]
        self.file_name = kwargs.get("file_name", None)
        self.ready = kwargs["ready"]
        self.ready_dt = kwargs.get("ready_dt", None)
        self.failed = kwargs["failed"]
        self.expiry_time = kwargs.get("expiry_time", None)


class Paths1UtuacyResumeFormatsGetResponses200ContentApplicationJsonSchema(
    msrest.serialization.Model
):
    """Paths1UtuacyResumeFormatsGetResponses200ContentApplicationJsonSchema.

    :keyword count:
    :paramtype count: int
    :keyword next:
    :paramtype next: str
    :keyword previous:
    :paramtype previous: str
    :keyword results:
    :paramtype results: list[~affinda.models.Get200ApplicationJsonPropertiesItemsItem]
    """

    _attribute_map = {
        "count": {"key": "count", "type": "int"},
        "next": {"key": "next", "type": "str"},
        "previous": {"key": "previous", "type": "str"},
        "results": {"key": "results", "type": "[Get200ApplicationJsonPropertiesItemsItem]"},
    }

    def __init__(self, **kwargs):
        super(Paths1UtuacyResumeFormatsGetResponses200ContentApplicationJsonSchema, self).__init__(
            **kwargs
        )
        self.count = kwargs.get("count", None)
        self.next = kwargs.get("next", None)
        self.previous = kwargs.get("previous", None)
        self.results = kwargs.get("results", None)


class Paths7EskthResumesPostRequestbodyContentMultipartFormDataSchema(msrest.serialization.Model):
    """Paths7EskthResumesPostRequestbodyContentMultipartFormDataSchema.

    :keyword file: File as binary data blob.
    :paramtype file: IO
    :keyword identifier: Unique identifier for the resume. If creating a document and left blank,
     one will be automatically generated.
    :paramtype identifier: str
    :keyword file_name: Optional filename of the file.
    :paramtype file_name: str
    :keyword url: URL to file to download and process.
    :paramtype url: str
    :keyword wait: If "true" (default), will return a response only after processing has completed.
     If "false", will return an empty data object which can be polled at the GET endpoint until
     processing is complete.
    :paramtype wait: bool
    :keyword resume_language: Language code in ISO 639-1 format. Must specify zh-cn or zh-tw for
     Chinese.
    :paramtype resume_language: str
    :keyword expiry_time: The date/time in ISO-8601 format when the resume will be automatically
     deleted.  Defaults to no expiry.
    :paramtype expiry_time: str
    """

    _attribute_map = {
        "file": {"key": "file", "type": "IO"},
        "identifier": {"key": "identifier", "type": "str"},
        "file_name": {"key": "fileName", "type": "str"},
        "url": {"key": "url", "type": "str"},
        "wait": {"key": "wait", "type": "bool"},
        "resume_language": {"key": "resumeLanguage", "type": "str"},
        "expiry_time": {"key": "expiryTime", "type": "str"},
    }

    def __init__(self, **kwargs):
        super(Paths7EskthResumesPostRequestbodyContentMultipartFormDataSchema, self).__init__(
            **kwargs
        )
        self.file = kwargs.get("file", None)
        self.identifier = kwargs.get("identifier", None)
        self.file_name = kwargs.get("file_name", None)
        self.url = kwargs.get("url", None)
        self.wait = kwargs.get("wait", True)
        self.resume_language = kwargs.get("resume_language", None)
        self.expiry_time = kwargs.get("expiry_time", None)


class Paths8DdhfcRedactedResumesPostRequestbodyContentMultipartFormDataSchema(
    msrest.serialization.Model
):
    """Paths8DdhfcRedactedResumesPostRequestbodyContentMultipartFormDataSchema.

    :keyword file: File as binary data blob.
    :paramtype file: IO
    :keyword identifier: Unique identifier for the resume. If creating a document and left blank,
     one will be automatically generated.
    :paramtype identifier: str
    :keyword file_name: Optional filename of the file.
    :paramtype file_name: str
    :keyword url: URL to file to download and process.
    :paramtype url: str
    :keyword resume_language: Language code in ISO 639-1 format. Must specify zh-cn or zh-tw for
     Chinese.
    :paramtype resume_language: str
    :keyword wait: If "true" (default), will return a response only after processing has completed.
     If "false", will return an empty data object which can be polled at the GET endpoint until
     processing is complete.
    :paramtype wait: bool
    :keyword redact_headshot: Whether to redact headshot.
    :paramtype redact_headshot: str
    :keyword redact_personal_details: Whether to redact personal details (e.g. name, address).
    :paramtype redact_personal_details: str
    :keyword redact_work_details: Whether to redact work details (e.g. company names).
    :paramtype redact_work_details: str
    :keyword redact_education_details: Whether to redact education details (e.g. university names).
    :paramtype redact_education_details: str
    :keyword redact_referees: Whether to redact referee details.
    :paramtype redact_referees: str
    :keyword redact_locations: Whether to redact location names.
    :paramtype redact_locations: str
    :keyword redact_dates: Whether to redact dates.
    :paramtype redact_dates: str
    :keyword expiry_time: The date/time in ISO-8601 format when the resume will be automatically
     deleted.  Defaults to no expiry.
    :paramtype expiry_time: str
    """

    _attribute_map = {
        "file": {"key": "file", "type": "IO"},
        "identifier": {"key": "identifier", "type": "str"},
        "file_name": {"key": "fileName", "type": "str"},
        "url": {"key": "url", "type": "str"},
        "resume_language": {"key": "resumeLanguage", "type": "str"},
        "wait": {"key": "wait", "type": "bool"},
        "redact_headshot": {"key": "redactHeadshot", "type": "str"},
        "redact_personal_details": {"key": "redactPersonalDetails", "type": "str"},
        "redact_work_details": {"key": "redactWorkDetails", "type": "str"},
        "redact_education_details": {"key": "redactEducationDetails", "type": "str"},
        "redact_referees": {"key": "redactReferees", "type": "str"},
        "redact_locations": {"key": "redactLocations", "type": "str"},
        "redact_dates": {"key": "redactDates", "type": "str"},
        "expiry_time": {"key": "expiryTime", "type": "str"},
    }

    def __init__(self, **kwargs):
        super(
            Paths8DdhfcRedactedResumesPostRequestbodyContentMultipartFormDataSchema, self
        ).__init__(**kwargs)
        self.file = kwargs.get("file", None)
        self.identifier = kwargs.get("identifier", None)
        self.file_name = kwargs.get("file_name", None)
        self.url = kwargs.get("url", None)
        self.resume_language = kwargs.get("resume_language", None)
        self.wait = kwargs.get("wait", True)
        self.redact_headshot = kwargs.get("redact_headshot", "true")
        self.redact_personal_details = kwargs.get("redact_personal_details", "true")
        self.redact_work_details = kwargs.get("redact_work_details", "true")
        self.redact_education_details = kwargs.get("redact_education_details", "true")
        self.redact_referees = kwargs.get("redact_referees", "true")
        self.redact_locations = kwargs.get("redact_locations", "true")
        self.redact_dates = kwargs.get("redact_dates", "true")
        self.expiry_time = kwargs.get("expiry_time", None)


class PathsYzn84IReformattedResumesPostRequestbodyContentMultipartFormDataSchema(
    msrest.serialization.Model
):
    """PathsYzn84IReformattedResumesPostRequestbodyContentMultipartFormDataSchema.

    All required parameters must be populated in order to send to Azure.

    :keyword file: File as binary data blob.
    :paramtype file: IO
    :keyword identifier: Unique identifier for the resume. If creating a document and left blank,
     one will be automatically generated.
    :paramtype identifier: str
    :keyword file_name: Optional filename of the file.
    :paramtype file_name: str
    :keyword url: URL to file to download and process.
    :paramtype url: str
    :keyword resume_language: Language code in ISO 639-1 format. Must specify zh-cn or zh-tw for
     Chinese.
    :paramtype resume_language: str
    :keyword resume_format: Required. Identifier of the format used.
    :paramtype resume_format: str
    :keyword wait: If "true" (default), will return a response only after processing has completed.
     If "false", will return an empty data object which can be polled at the GET endpoint until
     processing is complete.
    :paramtype wait: bool
    """

    _validation = {
        "resume_format": {"required": True},
    }

    _attribute_map = {
        "file": {"key": "file", "type": "IO"},
        "identifier": {"key": "identifier", "type": "str"},
        "file_name": {"key": "fileName", "type": "str"},
        "url": {"key": "url", "type": "str"},
        "resume_language": {"key": "resumeLanguage", "type": "str"},
        "resume_format": {"key": "resumeFormat", "type": "str"},
        "wait": {"key": "wait", "type": "bool"},
    }

    def __init__(self, **kwargs):
        super(
            PathsYzn84IReformattedResumesPostRequestbodyContentMultipartFormDataSchema, self
        ).__init__(**kwargs)
        self.file = kwargs.get("file", None)
        self.identifier = kwargs.get("identifier", None)
        self.file_name = kwargs.get("file_name", None)
        self.url = kwargs.get("url", None)
        self.resume_language = kwargs.get("resume_language", None)
        self.resume_format = kwargs["resume_format"]
        self.wait = kwargs.get("wait", True)


class RedactedResume(msrest.serialization.Model):
    """RedactedResume.

    All required parameters must be populated in order to send to Azure.

    :keyword data: Required.
    :paramtype data: ~affinda.models.RedactedResumeData
    :keyword meta: Required.
    :paramtype meta: ~affinda.models.Meta
    :keyword error: Required.
    :paramtype error: ~affinda.models.Error
    """

    _validation = {
        "data": {"required": True},
        "meta": {"required": True},
        "error": {"required": True},
    }

    _attribute_map = {
        "data": {"key": "data", "type": "RedactedResumeData"},
        "meta": {"key": "meta", "type": "Meta"},
        "error": {"key": "error", "type": "Error"},
    }

    def __init__(self, **kwargs):
        super(RedactedResume, self).__init__(**kwargs)
        self.data = kwargs["data"]
        self.meta = kwargs["meta"]
        self.error = kwargs["error"]


class RedactedResumeData(msrest.serialization.Model):
    """RedactedResumeData.

    :keyword redacted_pdf:
    :paramtype redacted_pdf: str
    """

    _attribute_map = {
        "redacted_pdf": {"key": "redactedPdf", "type": "str"},
    }

    def __init__(self, **kwargs):
        super(RedactedResumeData, self).__init__(**kwargs)
        self.redacted_pdf = kwargs.get("redacted_pdf", None)


class ReformattedResume(msrest.serialization.Model):
    """ReformattedResume.

    All required parameters must be populated in order to send to Azure.

    :keyword data: Required.
    :paramtype data: ~affinda.models.ReformattedResumeData
    :keyword meta: Required.
    :paramtype meta: ~affinda.models.Meta
    :keyword error: Required.
    :paramtype error: ~affinda.models.Error
    """

    _validation = {
        "data": {"required": True},
        "meta": {"required": True},
        "error": {"required": True},
    }

    _attribute_map = {
        "data": {"key": "data", "type": "ReformattedResumeData"},
        "meta": {"key": "meta", "type": "Meta"},
        "error": {"key": "error", "type": "Error"},
    }

    def __init__(self, **kwargs):
        super(ReformattedResume, self).__init__(**kwargs)
        self.data = kwargs["data"]
        self.meta = kwargs["meta"]
        self.error = kwargs["error"]


class ReformattedResumeData(msrest.serialization.Model):
    """ReformattedResumeData.

    :keyword reformatted_file:
    :paramtype reformatted_file: str
    """

    _attribute_map = {
        "reformatted_file": {"key": "reformattedFile", "type": "str"},
    }

    def __init__(self, **kwargs):
        super(ReformattedResumeData, self).__init__(**kwargs)
        self.reformatted_file = kwargs.get("reformatted_file", None)


class RequestError(msrest.serialization.Model):
    """RequestError.

    All required parameters must be populated in order to send to Azure.

    :keyword detail: Required.
    :paramtype detail: str
    :keyword status_code: Required.
    :paramtype status_code: int
    """

    _validation = {
        "detail": {"required": True},
        "status_code": {"required": True},
    }

    _attribute_map = {
        "detail": {"key": "detail", "type": "str"},
        "status_code": {"key": "statusCode", "type": "int"},
    }

    def __init__(self, **kwargs):
        super(RequestError, self).__init__(**kwargs)
        self.detail = kwargs["detail"]
        self.status_code = kwargs["status_code"]


class Resume(msrest.serialization.Model):
    """Resume.

    All required parameters must be populated in order to send to Azure.

    :keyword data: Required.
    :paramtype data: ~affinda.models.ResumeData
    :keyword meta: Required.
    :paramtype meta: ~affinda.models.Meta
    :keyword error: Required.
    :paramtype error: ~affinda.models.Error
    """

    _validation = {
        "data": {"required": True},
        "meta": {"required": True},
        "error": {"required": True},
    }

    _attribute_map = {
        "data": {"key": "data", "type": "ResumeData"},
        "meta": {"key": "meta", "type": "Meta"},
        "error": {"key": "error", "type": "Error"},
    }

    def __init__(self, **kwargs):
        super(Resume, self).__init__(**kwargs)
        self.data = kwargs["data"]
        self.meta = kwargs["meta"]
        self.error = kwargs["error"]


class ResumeData(msrest.serialization.Model):
    """ResumeData.

    :keyword name:
    :paramtype name: ~affinda.models.ResumeDataName
    :keyword phone_numbers:
    :paramtype phone_numbers: list[str]
    :keyword websites:
    :paramtype websites: list[str]
    :keyword emails:
    :paramtype emails: list[str]
    :keyword date_of_birth:
    :paramtype date_of_birth: str
    :keyword location:
    :paramtype location: ~affinda.models.Location
    :keyword objective:
    :paramtype objective: str
    :keyword languages:
    :paramtype languages: list[str]
    :keyword summary:
    :paramtype summary: str
    :keyword total_years_experience:
    :paramtype total_years_experience: int
    :keyword head_shot: base64 encoded string.
    :paramtype head_shot: bytearray
    :keyword education:
    :paramtype education: list[~affinda.models.ResumeDataEducationItem]
    :keyword profession: Prediction of the candidate's profession based on recent work experience.
    :paramtype profession: str
    :keyword linkedin: Linkedin account associated with the candidate.
    :paramtype linkedin: str
    :keyword work_experience:
    :paramtype work_experience: list[~affinda.models.ResumeDataWorkExperienceItem]
    :keyword skills:
    :paramtype skills: list[~affinda.models.ResumeDataSkillsItem]
    :keyword certifications:
    :paramtype certifications: list[str]
    :keyword publications:
    :paramtype publications: list[str]
    :keyword referees:
    :paramtype referees: list[~affinda.models.ResumeDataRefereesItem]
    :keyword sections:
    :paramtype sections: list[~affinda.models.ResumeDataSectionsItem]
    :keyword is_resume_probability: Probability that the given document is a resume. Values below
     30 suggest that the resume is not a resume.
    :paramtype is_resume_probability: int
    :keyword raw_text: All of the raw text of the parsed resume, example is shortened for
     readiblity.
    :paramtype raw_text: str
    """

    _attribute_map = {
        "name": {"key": "name", "type": "ResumeDataName"},
        "phone_numbers": {"key": "phoneNumbers", "type": "[str]"},
        "websites": {"key": "websites", "type": "[str]"},
        "emails": {"key": "emails", "type": "[str]"},
        "date_of_birth": {"key": "dateOfBirth", "type": "str"},
        "location": {"key": "location", "type": "Location"},
        "objective": {"key": "objective", "type": "str"},
        "languages": {"key": "languages", "type": "[str]"},
        "summary": {"key": "summary", "type": "str"},
        "total_years_experience": {"key": "totalYearsExperience", "type": "int"},
        "head_shot": {"key": "headShot", "type": "bytearray"},
        "education": {"key": "education", "type": "[ResumeDataEducationItem]"},
        "profession": {"key": "profession", "type": "str"},
        "linkedin": {"key": "linkedin", "type": "str"},
        "work_experience": {"key": "workExperience", "type": "[ResumeDataWorkExperienceItem]"},
        "skills": {"key": "skills", "type": "[ResumeDataSkillsItem]"},
        "certifications": {"key": "certifications", "type": "[str]"},
        "publications": {"key": "publications", "type": "[str]"},
        "referees": {"key": "referees", "type": "[ResumeDataRefereesItem]"},
        "sections": {"key": "sections", "type": "[ResumeDataSectionsItem]"},
        "is_resume_probability": {"key": "isResumeProbability", "type": "int"},
        "raw_text": {"key": "rawText", "type": "str"},
    }

    def __init__(self, **kwargs):
        super(ResumeData, self).__init__(**kwargs)
        self.name = kwargs.get("name", None)
        self.phone_numbers = kwargs.get("phone_numbers", None)
        self.websites = kwargs.get("websites", None)
        self.emails = kwargs.get("emails", None)
        self.date_of_birth = kwargs.get("date_of_birth", None)
        self.location = kwargs.get("location", None)
        self.objective = kwargs.get("objective", None)
        self.languages = kwargs.get("languages", None)
        self.summary = kwargs.get("summary", None)
        self.total_years_experience = kwargs.get("total_years_experience", None)
        self.head_shot = kwargs.get("head_shot", None)
        self.education = kwargs.get("education", None)
        self.profession = kwargs.get("profession", None)
        self.linkedin = kwargs.get("linkedin", None)
        self.work_experience = kwargs.get("work_experience", None)
        self.skills = kwargs.get("skills", None)
        self.certifications = kwargs.get("certifications", None)
        self.publications = kwargs.get("publications", None)
        self.referees = kwargs.get("referees", None)
        self.sections = kwargs.get("sections", None)
        self.is_resume_probability = kwargs.get("is_resume_probability", None)
        self.raw_text = kwargs.get("raw_text", None)


class ResumeDataEducationItem(msrest.serialization.Model):
    """ResumeDataEducationItem.

    :keyword organization:
    :paramtype organization: str
    :keyword accreditation:
    :paramtype accreditation: ~affinda.models.ResumeDataEducationItemAccreditation
    :keyword grade:
    :paramtype grade: ~affinda.models.ResumeDataEducationItemGrade
    :keyword location:
    :paramtype location: ~affinda.models.Location
    :keyword dates:
    :paramtype dates: ~affinda.models.ResumeDataEducationItemDates
    """

    _attribute_map = {
        "organization": {"key": "organization", "type": "str"},
        "accreditation": {"key": "accreditation", "type": "ResumeDataEducationItemAccreditation"},
        "grade": {"key": "grade", "type": "ResumeDataEducationItemGrade"},
        "location": {"key": "location", "type": "Location"},
        "dates": {"key": "dates", "type": "ResumeDataEducationItemDates"},
    }

    def __init__(self, **kwargs):
        super(ResumeDataEducationItem, self).__init__(**kwargs)
        self.organization = kwargs.get("organization", None)
        self.accreditation = kwargs.get("accreditation", None)
        self.grade = kwargs.get("grade", None)
        self.location = kwargs.get("location", None)
        self.dates = kwargs.get("dates", None)


class ResumeDataEducationItemAccreditation(msrest.serialization.Model):
    """ResumeDataEducationItemAccreditation.

    :keyword education:
    :paramtype education: str
    :keyword input_str:
    :paramtype input_str: str
    :keyword match_str:
    :paramtype match_str: str
    :keyword education_level:
    :paramtype education_level: str
    """

    _attribute_map = {
        "education": {"key": "education", "type": "str"},
        "input_str": {"key": "inputStr", "type": "str"},
        "match_str": {"key": "matchStr", "type": "str"},
        "education_level": {"key": "educationLevel", "type": "str"},
    }

    def __init__(self, **kwargs):
        super(ResumeDataEducationItemAccreditation, self).__init__(**kwargs)
        self.education = kwargs.get("education", None)
        self.input_str = kwargs.get("input_str", None)
        self.match_str = kwargs.get("match_str", None)
        self.education_level = kwargs.get("education_level", None)


class ResumeDataEducationItemDates(msrest.serialization.Model):
    """ResumeDataEducationItemDates.

    :keyword completion_date:
    :paramtype completion_date: ~datetime.date
    :keyword is_current:
    :paramtype is_current: bool
    :keyword start_date:
    :paramtype start_date: ~datetime.date
    """

    _attribute_map = {
        "completion_date": {"key": "completionDate", "type": "date"},
        "is_current": {"key": "isCurrent", "type": "bool"},
        "start_date": {"key": "startDate", "type": "date"},
    }

    def __init__(self, **kwargs):
        super(ResumeDataEducationItemDates, self).__init__(**kwargs)
        self.completion_date = kwargs.get("completion_date", None)
        self.is_current = kwargs.get("is_current", None)
        self.start_date = kwargs.get("start_date", None)


class ResumeDataEducationItemGrade(msrest.serialization.Model):
    """ResumeDataEducationItemGrade.

    :keyword raw:
    :paramtype raw: str
    :keyword metric:
    :paramtype metric: str
    :keyword value:
    :paramtype value: str
    """

    _attribute_map = {
        "raw": {"key": "raw", "type": "str"},
        "metric": {"key": "metric", "type": "str"},
        "value": {"key": "value", "type": "str"},
    }

    def __init__(self, **kwargs):
        super(ResumeDataEducationItemGrade, self).__init__(**kwargs)
        self.raw = kwargs.get("raw", None)
        self.metric = kwargs.get("metric", None)
        self.value = kwargs.get("value", None)


class ResumeDataName(msrest.serialization.Model):
    """ResumeDataName.

    :keyword raw:
    :paramtype raw: str
    :keyword first:
    :paramtype first: str
    :keyword last:
    :paramtype last: str
    :keyword middle:
    :paramtype middle: str
    :keyword title:
    :paramtype title: str
    """

    _attribute_map = {
        "raw": {"key": "raw", "type": "str"},
        "first": {"key": "first", "type": "str"},
        "last": {"key": "last", "type": "str"},
        "middle": {"key": "middle", "type": "str"},
        "title": {"key": "title", "type": "str"},
    }

    def __init__(self, **kwargs):
        super(ResumeDataName, self).__init__(**kwargs)
        self.raw = kwargs.get("raw", None)
        self.first = kwargs.get("first", None)
        self.last = kwargs.get("last", None)
        self.middle = kwargs.get("middle", None)
        self.title = kwargs.get("title", None)


class ResumeDataRefereesItem(msrest.serialization.Model):
    """ResumeDataRefereesItem.

    :keyword name:
    :paramtype name: str
    :keyword text:
    :paramtype text: str
    :keyword email:
    :paramtype email: str
    :keyword number:
    :paramtype number: str
    """

    _attribute_map = {
        "name": {"key": "name", "type": "str"},
        "text": {"key": "text", "type": "str"},
        "email": {"key": "email", "type": "str"},
        "number": {"key": "number", "type": "str"},
    }

    def __init__(self, **kwargs):
        super(ResumeDataRefereesItem, self).__init__(**kwargs)
        self.name = kwargs.get("name", None)
        self.text = kwargs.get("text", None)
        self.email = kwargs.get("email", None)
        self.number = kwargs.get("number", None)


class ResumeDataSectionsItem(msrest.serialization.Model):
    """ResumeDataSectionsItem.

    :keyword section_type:
    :paramtype section_type: str
    :keyword bbox:
    :paramtype bbox: list[float]
    :keyword page_index:
    :paramtype page_index: int
    :keyword text:
    :paramtype text: str
    """

    _validation = {
        "bbox": {"max_items": 4, "min_items": 4},
    }

    _attribute_map = {
        "section_type": {"key": "sectionType", "type": "str"},
        "bbox": {"key": "bbox", "type": "[float]"},
        "page_index": {"key": "pageIndex", "type": "int"},
        "text": {"key": "text", "type": "str"},
    }

    def __init__(self, **kwargs):
        super(ResumeDataSectionsItem, self).__init__(**kwargs)
        self.section_type = kwargs.get("section_type", None)
        self.bbox = kwargs.get("bbox", None)
        self.page_index = kwargs.get("page_index", None)
        self.text = kwargs.get("text", None)


class ResumeDataSkillsItem(msrest.serialization.Model):
    """ResumeDataSkillsItem.

    :keyword name:
    :paramtype name: str
    :keyword last_used:
    :paramtype last_used: str
    :keyword number_of_months:
    :paramtype number_of_months: int
    :keyword type:
    :paramtype type: str
    :keyword sources:
    :paramtype sources: list[~affinda.models.ResumeDataSkillsPropertiesItemsItem]
    """

    _attribute_map = {
        "name": {"key": "name", "type": "str"},
        "last_used": {"key": "lastUsed", "type": "str"},
        "number_of_months": {"key": "numberOfMonths", "type": "int"},
        "type": {"key": "type", "type": "str"},
        "sources": {"key": "sources", "type": "[ResumeDataSkillsPropertiesItemsItem]"},
    }

    def __init__(self, **kwargs):
        super(ResumeDataSkillsItem, self).__init__(**kwargs)
        self.name = kwargs.get("name", None)
        self.last_used = kwargs.get("last_used", None)
        self.number_of_months = kwargs.get("number_of_months", None)
        self.type = kwargs.get("type", None)
        self.sources = kwargs.get("sources", None)


class ResumeDataSkillsPropertiesItemsItem(msrest.serialization.Model):
    """ResumeDataSkillsPropertiesItemsItem.

    :keyword section:
    :paramtype section: str
    :keyword position:
    :paramtype position: int
    """

    _attribute_map = {
        "section": {"key": "section", "type": "str"},
        "position": {"key": "position", "type": "int"},
    }

    def __init__(self, **kwargs):
        super(ResumeDataSkillsPropertiesItemsItem, self).__init__(**kwargs)
        self.section = kwargs.get("section", None)
        self.position = kwargs.get("position", None)


class ResumeDataWorkExperienceItem(msrest.serialization.Model):
    """ResumeDataWorkExperienceItem.

    :keyword job_title:
    :paramtype job_title: str
    :keyword organization:
    :paramtype organization: str
    :keyword location:
    :paramtype location: ~affinda.models.Location
    :keyword job_description:
    :paramtype job_description: str
    :keyword dates:
    :paramtype dates: ~affinda.models.ResumeDataWorkExperienceItemDates
    """

    _attribute_map = {
        "job_title": {"key": "jobTitle", "type": "str"},
        "organization": {"key": "organization", "type": "str"},
        "location": {"key": "location", "type": "Location"},
        "job_description": {"key": "jobDescription", "type": "str"},
        "dates": {"key": "dates", "type": "ResumeDataWorkExperienceItemDates"},
    }

    def __init__(self, **kwargs):
        super(ResumeDataWorkExperienceItem, self).__init__(**kwargs)
        self.job_title = kwargs.get("job_title", None)
        self.organization = kwargs.get("organization", None)
        self.location = kwargs.get("location", None)
        self.job_description = kwargs.get("job_description", None)
        self.dates = kwargs.get("dates", None)


class ResumeDataWorkExperienceItemDates(msrest.serialization.Model):
    """ResumeDataWorkExperienceItemDates.

    :keyword start_date:
    :paramtype start_date: ~datetime.date
    :keyword end_date:
    :paramtype end_date: ~datetime.date
    :keyword months_in_position:
    :paramtype months_in_position: int
    :keyword is_current:
    :paramtype is_current: bool
    """

    _attribute_map = {
        "start_date": {"key": "startDate", "type": "date"},
        "end_date": {"key": "endDate", "type": "date"},
        "months_in_position": {"key": "monthsInPosition", "type": "int"},
        "is_current": {"key": "isCurrent", "type": "bool"},
    }

    def __init__(self, **kwargs):
        super(ResumeDataWorkExperienceItemDates, self).__init__(**kwargs)
        self.start_date = kwargs.get("start_date", None)
        self.end_date = kwargs.get("end_date", None)
        self.months_in_position = kwargs.get("months_in_position", None)
        self.is_current = kwargs.get("is_current", None)
