# coding=utf-8
# --------------------------------------------------------------------------
# Code generated by Microsoft (R) AutoRest Code Generator (autorest: 3.6.4, generator: @autorest/python@5.9.2)
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

import datetime
from typing import IO, List, Optional

from azure.core.exceptions import HttpResponseError
import msrest.serialization


class Error(msrest.serialization.Model):
    """Error.

    :ivar error_code:
    :vartype error_code: str
    :ivar error_detail:
    :vartype error_detail: str
    """

    _attribute_map = {
        "error_code": {"key": "errorCode", "type": "str"},
        "error_detail": {"key": "errorDetail", "type": "str"},
    }

    def __init__(
        self, *, error_code: Optional[str] = None, error_detail: Optional[str] = None, **kwargs
    ):
        """
        :keyword error_code:
        :paramtype error_code: str
        :keyword error_detail:
        :paramtype error_detail: str
        """
        super(Error, self).__init__(**kwargs)
        self.error_code = error_code
        self.error_detail = error_detail


class Get200ApplicationJsonPropertiesItemsItem(msrest.serialization.Model):
    """Get200ApplicationJsonPropertiesItemsItem.

    All required parameters must be populated in order to send to Azure.

    :ivar identifier: Required. Unique identifier for the document. If creating a document and left
     blank, one will be automatically generated.
    :vartype identifier: str
    :ivar format_file: Required. URL to a template to apply.
    :vartype format_file: str
    """

    _validation = {
        "identifier": {"required": True},
        "format_file": {"required": True},
    }

    _attribute_map = {
        "identifier": {"key": "identifier", "type": "str"},
        "format_file": {"key": "formatFile", "type": "str"},
    }

    def __init__(self, *, identifier: str, format_file: str, **kwargs):
        """
        :keyword identifier: Required. Unique identifier for the document. If creating a document and
         left blank, one will be automatically generated.
        :paramtype identifier: str
        :keyword format_file: Required. URL to a template to apply.
        :paramtype format_file: str
        """
        super(Get200ApplicationJsonPropertiesItemsItem, self).__init__(**kwargs)
        self.identifier = identifier
        self.format_file = format_file


class GetAllDocumentsResults(msrest.serialization.Model):
    """GetAllDocumentsResults.

    :ivar count: Number of documents in result.
    :vartype count: int
    :ivar next: URL to request next page of results.
    :vartype next: str
    :ivar previous: URL to request previous page of results.
    :vartype previous: str
    :ivar results:
    :vartype results: list[~affinda.models.Meta]
    """

    _attribute_map = {
        "count": {"key": "count", "type": "int"},
        "next": {"key": "next", "type": "str"},
        "previous": {"key": "previous", "type": "str"},
        "results": {"key": "results", "type": "[Meta]"},
    }

    def __init__(
        self,
        *,
        count: Optional[int] = None,
        next: Optional[str] = None,
        previous: Optional[str] = None,
        results: Optional[List["Meta"]] = None,
        **kwargs,
    ):
        """
        :keyword count: Number of documents in result.
        :paramtype count: int
        :keyword next: URL to request next page of results.
        :paramtype next: str
        :keyword previous: URL to request previous page of results.
        :paramtype previous: str
        :keyword results:
        :paramtype results: list[~affinda.models.Meta]
        """
        super(GetAllDocumentsResults, self).__init__(**kwargs)
        self.count = count
        self.next = next
        self.previous = previous
        self.results = results


class GetAllInvoicesResults(msrest.serialization.Model):
    """GetAllInvoicesResults.

    :ivar count: Number of documents in result.
    :vartype count: int
    :ivar next: URL to request next page of results.
    :vartype next: str
    :ivar previous: URL to request previous page of results.
    :vartype previous: str
    :ivar results:
    :vartype results: list[~affinda.models.Meta]
    """

    _attribute_map = {
        "count": {"key": "count", "type": "int"},
        "next": {"key": "next", "type": "str"},
        "previous": {"key": "previous", "type": "str"},
        "results": {"key": "results", "type": "[Meta]"},
    }

    def __init__(
        self,
        *,
        count: Optional[int] = None,
        next: Optional[str] = None,
        previous: Optional[str] = None,
        results: Optional[List["Meta"]] = None,
        **kwargs,
    ):
        """
        :keyword count: Number of documents in result.
        :paramtype count: int
        :keyword next: URL to request next page of results.
        :paramtype next: str
        :keyword previous: URL to request previous page of results.
        :paramtype previous: str
        :keyword results:
        :paramtype results: list[~affinda.models.Meta]
        """
        super(GetAllInvoicesResults, self).__init__(**kwargs)
        self.count = count
        self.next = next
        self.previous = previous
        self.results = results


class Invoice(msrest.serialization.Model):
    """Invoice.

    All required parameters must be populated in order to send to Azure.

    :ivar data: Required.
    :vartype data: ~affinda.models.InvoiceData
    :ivar meta: Required.
    :vartype meta: ~affinda.models.Meta
    :ivar error: Required.
    :vartype error: ~affinda.models.Error
    """

    _validation = {
        "data": {"required": True},
        "meta": {"required": True},
        "error": {"required": True},
    }

    _attribute_map = {
        "data": {"key": "data", "type": "InvoiceData"},
        "meta": {"key": "meta", "type": "Meta"},
        "error": {"key": "error", "type": "Error"},
    }

    def __init__(self, *, data: "InvoiceData", meta: "Meta", error: "Error", **kwargs):
        """
        :keyword data: Required.
        :paramtype data: ~affinda.models.InvoiceData
        :keyword meta: Required.
        :paramtype meta: ~affinda.models.Meta
        :keyword error: Required.
        :paramtype error: ~affinda.models.Error
        """
        super(Invoice, self).__init__(**kwargs)
        self.data = data
        self.meta = meta
        self.error = error


class InvoiceData(msrest.serialization.Model):
    """InvoiceData.

    :ivar invoice_date:
    :vartype invoice_date: str
    :ivar invoice_order_date:
    :vartype invoice_order_date: str
    :ivar payment_date_due:
    :vartype payment_date_due: str
    :ivar payment_amount_base:
    :vartype payment_amount_base: str
    :ivar payment_amount_tax:
    :vartype payment_amount_tax: str
    :ivar payment_amount_total:
    :vartype payment_amount_total: str
    :ivar payment_amount_paid:
    :vartype payment_amount_paid: str
    :ivar payment_amount_due:
    :vartype payment_amount_due: str
    :ivar invoice_number:
    :vartype invoice_number: str
    :ivar invoice_purchase_order_number:
    :vartype invoice_purchase_order_number: str
    :ivar supplier_business_number:
    :vartype supplier_business_number: str
    :ivar customer_number:
    :vartype customer_number: str
    :ivar customer_business_number:
    :vartype customer_business_number: str
    :ivar payment_reference:
    :vartype payment_reference: str
    :ivar bank_account_number:
    :vartype bank_account_number: str
    :ivar supplier_vat:
    :vartype supplier_vat: str
    :ivar customer_vat:
    :vartype customer_vat: str
    :ivar bpay_biller_code:
    :vartype bpay_biller_code: str
    :ivar bpay_reference:
    :vartype bpay_reference: str
    :ivar bank_sort_code:
    :vartype bank_sort_code: str
    :ivar bank_iban:
    :vartype bank_iban: str
    :ivar bank_swift:
    :vartype bank_swift: str
    :ivar bank_bsb:
    :vartype bank_bsb: str
    :ivar customer_contact_name:
    :vartype customer_contact_name: str
    :ivar customer_company_name:
    :vartype customer_company_name: str
    :ivar supplier_company_name:
    :vartype supplier_company_name: str
    :ivar customer_billing_address:
    :vartype customer_billing_address: ~affinda.models.Location
    :ivar customer_delivery_address:
    :vartype customer_delivery_address: ~affinda.models.Location
    :ivar supplier_address:
    :vartype supplier_address: ~affinda.models.Location
    :ivar customer_phone_number:
    :vartype customer_phone_number: str
    :ivar supplier_phone_number:
    :vartype supplier_phone_number: str
    :ivar supplier_fax:
    :vartype supplier_fax: str
    :ivar customer_email:
    :vartype customer_email: str
    :ivar supplier_email:
    :vartype supplier_email: str
    :ivar supplier_website:
    :vartype supplier_website: str
    """

    _attribute_map = {
        "invoice_date": {"key": "invoiceDate", "type": "str"},
        "invoice_order_date": {"key": "invoiceOrderDate", "type": "str"},
        "payment_date_due": {"key": "paymentDateDue", "type": "str"},
        "payment_amount_base": {"key": "paymentAmountBase", "type": "str"},
        "payment_amount_tax": {"key": "paymentAmountTax", "type": "str"},
        "payment_amount_total": {"key": "paymentAmountTotal", "type": "str"},
        "payment_amount_paid": {"key": "paymentAmountPaid", "type": "str"},
        "payment_amount_due": {"key": "paymentAmountDue", "type": "str"},
        "invoice_number": {"key": "invoiceNumber", "type": "str"},
        "invoice_purchase_order_number": {"key": "invoicePurchaseOrderNumber", "type": "str"},
        "supplier_business_number": {"key": "supplierBusinessNumber", "type": "str"},
        "customer_number": {"key": "customerNumber", "type": "str"},
        "customer_business_number": {"key": "customerBusinessNumber", "type": "str"},
        "payment_reference": {"key": "paymentReference", "type": "str"},
        "bank_account_number": {"key": "bankAccountNumber", "type": "str"},
        "supplier_vat": {"key": "supplierVAT", "type": "str"},
        "customer_vat": {"key": "customerVAT", "type": "str"},
        "bpay_biller_code": {"key": "bpayBillerCode", "type": "str"},
        "bpay_reference": {"key": "bpayReference", "type": "str"},
        "bank_sort_code": {"key": "bankSortCode", "type": "str"},
        "bank_iban": {"key": "bankIBAN", "type": "str"},
        "bank_swift": {"key": "bankSwift", "type": "str"},
        "bank_bsb": {"key": "bankBSB", "type": "str"},
        "customer_contact_name": {"key": "customerContactName", "type": "str"},
        "customer_company_name": {"key": "customerCompanyName", "type": "str"},
        "supplier_company_name": {"key": "supplierCompanyName", "type": "str"},
        "customer_billing_address": {"key": "customerBillingAddress", "type": "Location"},
        "customer_delivery_address": {"key": "customerDeliveryAddress", "type": "Location"},
        "supplier_address": {"key": "supplierAddress", "type": "Location"},
        "customer_phone_number": {"key": "customerPhoneNumber", "type": "str"},
        "supplier_phone_number": {"key": "supplierPhoneNumber", "type": "str"},
        "supplier_fax": {"key": "supplierFax", "type": "str"},
        "customer_email": {"key": "customerEmail", "type": "str"},
        "supplier_email": {"key": "supplierEmail", "type": "str"},
        "supplier_website": {"key": "supplierWebsite", "type": "str"},
    }

    def __init__(
        self,
        *,
        invoice_date: Optional[str] = None,
        invoice_order_date: Optional[str] = None,
        payment_date_due: Optional[str] = None,
        payment_amount_base: Optional[str] = None,
        payment_amount_tax: Optional[str] = None,
        payment_amount_total: Optional[str] = None,
        payment_amount_paid: Optional[str] = None,
        payment_amount_due: Optional[str] = None,
        invoice_number: Optional[str] = None,
        invoice_purchase_order_number: Optional[str] = None,
        supplier_business_number: Optional[str] = None,
        customer_number: Optional[str] = None,
        customer_business_number: Optional[str] = None,
        payment_reference: Optional[str] = None,
        bank_account_number: Optional[str] = None,
        supplier_vat: Optional[str] = None,
        customer_vat: Optional[str] = None,
        bpay_biller_code: Optional[str] = None,
        bpay_reference: Optional[str] = None,
        bank_sort_code: Optional[str] = None,
        bank_iban: Optional[str] = None,
        bank_swift: Optional[str] = None,
        bank_bsb: Optional[str] = None,
        customer_contact_name: Optional[str] = None,
        customer_company_name: Optional[str] = None,
        supplier_company_name: Optional[str] = None,
        customer_billing_address: Optional["Location"] = None,
        customer_delivery_address: Optional["Location"] = None,
        supplier_address: Optional["Location"] = None,
        customer_phone_number: Optional[str] = None,
        supplier_phone_number: Optional[str] = None,
        supplier_fax: Optional[str] = None,
        customer_email: Optional[str] = None,
        supplier_email: Optional[str] = None,
        supplier_website: Optional[str] = None,
        **kwargs,
    ):
        """
        :keyword invoice_date:
        :paramtype invoice_date: str
        :keyword invoice_order_date:
        :paramtype invoice_order_date: str
        :keyword payment_date_due:
        :paramtype payment_date_due: str
        :keyword payment_amount_base:
        :paramtype payment_amount_base: str
        :keyword payment_amount_tax:
        :paramtype payment_amount_tax: str
        :keyword payment_amount_total:
        :paramtype payment_amount_total: str
        :keyword payment_amount_paid:
        :paramtype payment_amount_paid: str
        :keyword payment_amount_due:
        :paramtype payment_amount_due: str
        :keyword invoice_number:
        :paramtype invoice_number: str
        :keyword invoice_purchase_order_number:
        :paramtype invoice_purchase_order_number: str
        :keyword supplier_business_number:
        :paramtype supplier_business_number: str
        :keyword customer_number:
        :paramtype customer_number: str
        :keyword customer_business_number:
        :paramtype customer_business_number: str
        :keyword payment_reference:
        :paramtype payment_reference: str
        :keyword bank_account_number:
        :paramtype bank_account_number: str
        :keyword supplier_vat:
        :paramtype supplier_vat: str
        :keyword customer_vat:
        :paramtype customer_vat: str
        :keyword bpay_biller_code:
        :paramtype bpay_biller_code: str
        :keyword bpay_reference:
        :paramtype bpay_reference: str
        :keyword bank_sort_code:
        :paramtype bank_sort_code: str
        :keyword bank_iban:
        :paramtype bank_iban: str
        :keyword bank_swift:
        :paramtype bank_swift: str
        :keyword bank_bsb:
        :paramtype bank_bsb: str
        :keyword customer_contact_name:
        :paramtype customer_contact_name: str
        :keyword customer_company_name:
        :paramtype customer_company_name: str
        :keyword supplier_company_name:
        :paramtype supplier_company_name: str
        :keyword customer_billing_address:
        :paramtype customer_billing_address: ~affinda.models.Location
        :keyword customer_delivery_address:
        :paramtype customer_delivery_address: ~affinda.models.Location
        :keyword supplier_address:
        :paramtype supplier_address: ~affinda.models.Location
        :keyword customer_phone_number:
        :paramtype customer_phone_number: str
        :keyword supplier_phone_number:
        :paramtype supplier_phone_number: str
        :keyword supplier_fax:
        :paramtype supplier_fax: str
        :keyword customer_email:
        :paramtype customer_email: str
        :keyword supplier_email:
        :paramtype supplier_email: str
        :keyword supplier_website:
        :paramtype supplier_website: str
        """
        super(InvoiceData, self).__init__(**kwargs)
        self.invoice_date = invoice_date
        self.invoice_order_date = invoice_order_date
        self.payment_date_due = payment_date_due
        self.payment_amount_base = payment_amount_base
        self.payment_amount_tax = payment_amount_tax
        self.payment_amount_total = payment_amount_total
        self.payment_amount_paid = payment_amount_paid
        self.payment_amount_due = payment_amount_due
        self.invoice_number = invoice_number
        self.invoice_purchase_order_number = invoice_purchase_order_number
        self.supplier_business_number = supplier_business_number
        self.customer_number = customer_number
        self.customer_business_number = customer_business_number
        self.payment_reference = payment_reference
        self.bank_account_number = bank_account_number
        self.supplier_vat = supplier_vat
        self.customer_vat = customer_vat
        self.bpay_biller_code = bpay_biller_code
        self.bpay_reference = bpay_reference
        self.bank_sort_code = bank_sort_code
        self.bank_iban = bank_iban
        self.bank_swift = bank_swift
        self.bank_bsb = bank_bsb
        self.customer_contact_name = customer_contact_name
        self.customer_company_name = customer_company_name
        self.supplier_company_name = supplier_company_name
        self.customer_billing_address = customer_billing_address
        self.customer_delivery_address = customer_delivery_address
        self.supplier_address = supplier_address
        self.customer_phone_number = customer_phone_number
        self.supplier_phone_number = supplier_phone_number
        self.supplier_fax = supplier_fax
        self.customer_email = customer_email
        self.supplier_email = supplier_email
        self.supplier_website = supplier_website


class Location(msrest.serialization.Model):
    """Location.

    All required parameters must be populated in order to send to Azure.

    :ivar formatted:
    :vartype formatted: str
    :ivar postal_code:
    :vartype postal_code: str
    :ivar state:
    :vartype state: str
    :ivar country:
    :vartype country: str
    :ivar raw_input: Required.
    :vartype raw_input: str
    :ivar street_number:
    :vartype street_number: str
    :ivar street:
    :vartype street: str
    :ivar apartment_number:
    :vartype apartment_number: str
    :ivar city:
    :vartype city: str
    """

    _validation = {
        "raw_input": {"required": True},
    }

    _attribute_map = {
        "formatted": {"key": "formatted", "type": "str"},
        "postal_code": {"key": "postalCode", "type": "str"},
        "state": {"key": "state", "type": "str"},
        "country": {"key": "country", "type": "str"},
        "raw_input": {"key": "rawInput", "type": "str"},
        "street_number": {"key": "streetNumber", "type": "str"},
        "street": {"key": "street", "type": "str"},
        "apartment_number": {"key": "apartmentNumber", "type": "str"},
        "city": {"key": "city", "type": "str"},
    }

    def __init__(
        self,
        *,
        raw_input: str,
        formatted: Optional[str] = None,
        postal_code: Optional[str] = None,
        state: Optional[str] = None,
        country: Optional[str] = None,
        street_number: Optional[str] = None,
        street: Optional[str] = None,
        apartment_number: Optional[str] = None,
        city: Optional[str] = None,
        **kwargs,
    ):
        """
        :keyword formatted:
        :paramtype formatted: str
        :keyword postal_code:
        :paramtype postal_code: str
        :keyword state:
        :paramtype state: str
        :keyword country:
        :paramtype country: str
        :keyword raw_input: Required.
        :paramtype raw_input: str
        :keyword street_number:
        :paramtype street_number: str
        :keyword street:
        :paramtype street: str
        :keyword apartment_number:
        :paramtype apartment_number: str
        :keyword city:
        :paramtype city: str
        """
        super(Location, self).__init__(**kwargs)
        self.formatted = formatted
        self.postal_code = postal_code
        self.state = state
        self.country = country
        self.raw_input = raw_input
        self.street_number = street_number
        self.street = street
        self.apartment_number = apartment_number
        self.city = city


class Meta(msrest.serialization.Model):
    """Meta.

    All required parameters must be populated in order to send to Azure.

    :ivar identifier: Required. Unique identifier for the document. If creating a document and left
     blank, one will be automatically generated.
    :vartype identifier: str
    :ivar file_name: Optional filename of the file.
    :vartype file_name: str
    :ivar ready: Required. If true, the document has finished processing. Particularly useful if an
     endpoint request specified wait=False, when polling use this variable to determine when to stop
     polling.
    :vartype ready: bool
    :ivar ready_dt: The datetime when the document was ready.
    :vartype ready_dt: ~datetime.datetime
    :ivar failed: Required. If true, some exception was raised during processing. Check the 'error'
     field of the main return object.
    :vartype failed: bool
    :ivar expiry_time: The date/time in ISO-8601 format when the document will be automatically
     deleted.  Defaults to no expiry.
    :vartype expiry_time: str
    """

    _validation = {
        "identifier": {"required": True},
        "ready": {"required": True},
        "failed": {"required": True},
    }

    _attribute_map = {
        "identifier": {"key": "identifier", "type": "str"},
        "file_name": {"key": "fileName", "type": "str"},
        "ready": {"key": "ready", "type": "bool"},
        "ready_dt": {"key": "readyDt", "type": "iso-8601"},
        "failed": {"key": "failed", "type": "bool"},
        "expiry_time": {"key": "expiryTime", "type": "str"},
    }

    def __init__(
        self,
        *,
        identifier: str,
        ready: bool,
        failed: bool,
        file_name: Optional[str] = None,
        ready_dt: Optional[datetime.datetime] = None,
        expiry_time: Optional[str] = None,
        **kwargs,
    ):
        """
        :keyword identifier: Required. Unique identifier for the document. If creating a document and
         left blank, one will be automatically generated.
        :paramtype identifier: str
        :keyword file_name: Optional filename of the file.
        :paramtype file_name: str
        :keyword ready: Required. If true, the document has finished processing. Particularly useful if
         an endpoint request specified wait=False, when polling use this variable to determine when to
         stop polling.
        :paramtype ready: bool
        :keyword ready_dt: The datetime when the document was ready.
        :paramtype ready_dt: ~datetime.datetime
        :keyword failed: Required. If true, some exception was raised during processing. Check the
         'error' field of the main return object.
        :paramtype failed: bool
        :keyword expiry_time: The date/time in ISO-8601 format when the document will be automatically
         deleted.  Defaults to no expiry.
        :paramtype expiry_time: str
        """
        super(Meta, self).__init__(**kwargs)
        self.identifier = identifier
        self.file_name = file_name
        self.ready = ready
        self.ready_dt = ready_dt
        self.failed = failed
        self.expiry_time = expiry_time


class Paths1BwrvmkInvoicesPostRequestbodyContentMultipartFormDataSchema(
    msrest.serialization.Model
):
    """Paths1BwrvmkInvoicesPostRequestbodyContentMultipartFormDataSchema.

    :ivar file: File as binary data blob.
    :vartype file: IO
    :ivar identifier: Unique identifier for the document. If creating a document and left blank,
     one will be automatically generated.
    :vartype identifier: str
    :ivar file_name: Optional filename of the file.
    :vartype file_name: str
    :ivar url: URL to file to download and process.
    :vartype url: bool
    :ivar wait: If "true" (default), will return a response only after processing has completed. If
     "false", will return an empty data object which can be polled at the GET endpoint until
     processing is complete.
    :vartype wait: bool
    :ivar language: Language code in ISO 639-1 format. Must specify zh-cn or zh-tw for Chinese.
    :vartype language: str
    :ivar expiry_time: The date/time in ISO-8601 format when the document will be automatically
     deleted.  Defaults to no expiry.
    :vartype expiry_time: str
    """

    _attribute_map = {
        "file": {"key": "file", "type": "IO"},
        "identifier": {"key": "identifier", "type": "str"},
        "file_name": {"key": "fileName", "type": "str"},
        "url": {"key": "url", "type": "bool"},
        "wait": {"key": "wait", "type": "bool"},
        "language": {"key": "language", "type": "str"},
        "expiry_time": {"key": "expiryTime", "type": "str"},
    }

    def __init__(
        self,
        *,
        file: Optional[IO] = None,
        identifier: Optional[str] = None,
        file_name: Optional[str] = None,
        url: Optional[bool] = True,
        wait: Optional[bool] = True,
        language: Optional[str] = None,
        expiry_time: Optional[str] = None,
        **kwargs,
    ):
        """
        :keyword file: File as binary data blob.
        :paramtype file: IO
        :keyword identifier: Unique identifier for the document. If creating a document and left blank,
         one will be automatically generated.
        :paramtype identifier: str
        :keyword file_name: Optional filename of the file.
        :paramtype file_name: str
        :keyword url: URL to file to download and process.
        :paramtype url: bool
        :keyword wait: If "true" (default), will return a response only after processing has completed.
         If "false", will return an empty data object which can be polled at the GET endpoint until
         processing is complete.
        :paramtype wait: bool
        :keyword language: Language code in ISO 639-1 format. Must specify zh-cn or zh-tw for Chinese.
        :paramtype language: str
        :keyword expiry_time: The date/time in ISO-8601 format when the document will be automatically
         deleted.  Defaults to no expiry.
        :paramtype expiry_time: str
        """
        super(Paths1BwrvmkInvoicesPostRequestbodyContentMultipartFormDataSchema, self).__init__(
            **kwargs
        )
        self.file = file
        self.identifier = identifier
        self.file_name = file_name
        self.url = url
        self.wait = wait
        self.language = language
        self.expiry_time = expiry_time


class Paths1UtuacyResumeFormatsGetResponses200ContentApplicationJsonSchema(
    msrest.serialization.Model
):
    """Paths1UtuacyResumeFormatsGetResponses200ContentApplicationJsonSchema.

    :ivar count: Number of documents in result.
    :vartype count: int
    :ivar next: URL to request next page of results.
    :vartype next: str
    :ivar previous: URL to request previous page of results.
    :vartype previous: str
    :ivar results:
    :vartype results: list[~affinda.models.Get200ApplicationJsonPropertiesItemsItem]
    """

    _attribute_map = {
        "count": {"key": "count", "type": "int"},
        "next": {"key": "next", "type": "str"},
        "previous": {"key": "previous", "type": "str"},
        "results": {"key": "results", "type": "[Get200ApplicationJsonPropertiesItemsItem]"},
    }

    def __init__(
        self,
        *,
        count: Optional[int] = None,
        next: Optional[str] = None,
        previous: Optional[str] = None,
        results: Optional[List["Get200ApplicationJsonPropertiesItemsItem"]] = None,
        **kwargs,
    ):
        """
        :keyword count: Number of documents in result.
        :paramtype count: int
        :keyword next: URL to request next page of results.
        :paramtype next: str
        :keyword previous: URL to request previous page of results.
        :paramtype previous: str
        :keyword results:
        :paramtype results: list[~affinda.models.Get200ApplicationJsonPropertiesItemsItem]
        """
        super(Paths1UtuacyResumeFormatsGetResponses200ContentApplicationJsonSchema, self).__init__(
            **kwargs
        )
        self.count = count
        self.next = next
        self.previous = previous
        self.results = results


class Paths7EskthResumesPostRequestbodyContentMultipartFormDataSchema(msrest.serialization.Model):
    """Paths7EskthResumesPostRequestbodyContentMultipartFormDataSchema.

    :ivar file: File as binary data blob.
    :vartype file: IO
    :ivar identifier: Unique identifier for the document. If creating a document and left blank,
     one will be automatically generated.
    :vartype identifier: str
    :ivar file_name: Optional filename of the file.
    :vartype file_name: str
    :ivar url: URL to file to download and process.
    :vartype url: str
    :ivar wait: If "true" (default), will return a response only after processing has completed. If
     "false", will return an empty data object which can be polled at the GET endpoint until
     processing is complete.
    :vartype wait: bool
    :ivar language: Language code in ISO 639-1 format. Must specify zh-cn or zh-tw for Chinese.
    :vartype language: str
    :ivar expiry_time: The date/time in ISO-8601 format when the document will be automatically
     deleted.  Defaults to no expiry.
    :vartype expiry_time: str
    """

    _attribute_map = {
        "file": {"key": "file", "type": "IO"},
        "identifier": {"key": "identifier", "type": "str"},
        "file_name": {"key": "fileName", "type": "str"},
        "url": {"key": "url", "type": "str"},
        "wait": {"key": "wait", "type": "bool"},
        "language": {"key": "language", "type": "str"},
        "expiry_time": {"key": "expiryTime", "type": "str"},
    }

    def __init__(
        self,
        *,
        file: Optional[IO] = None,
        identifier: Optional[str] = None,
        file_name: Optional[str] = None,
        url: Optional[str] = None,
        wait: Optional[bool] = True,
        language: Optional[str] = None,
        expiry_time: Optional[str] = None,
        **kwargs,
    ):
        """
        :keyword file: File as binary data blob.
        :paramtype file: IO
        :keyword identifier: Unique identifier for the document. If creating a document and left blank,
         one will be automatically generated.
        :paramtype identifier: str
        :keyword file_name: Optional filename of the file.
        :paramtype file_name: str
        :keyword url: URL to file to download and process.
        :paramtype url: str
        :keyword wait: If "true" (default), will return a response only after processing has completed.
         If "false", will return an empty data object which can be polled at the GET endpoint until
         processing is complete.
        :paramtype wait: bool
        :keyword language: Language code in ISO 639-1 format. Must specify zh-cn or zh-tw for Chinese.
        :paramtype language: str
        :keyword expiry_time: The date/time in ISO-8601 format when the document will be automatically
         deleted.  Defaults to no expiry.
        :paramtype expiry_time: str
        """
        super(Paths7EskthResumesPostRequestbodyContentMultipartFormDataSchema, self).__init__(
            **kwargs
        )
        self.file = file
        self.identifier = identifier
        self.file_name = file_name
        self.url = url
        self.wait = wait
        self.language = language
        self.expiry_time = expiry_time


class Paths8DdhfcRedactedResumesPostRequestbodyContentMultipartFormDataSchema(
    msrest.serialization.Model
):
    """Paths8DdhfcRedactedResumesPostRequestbodyContentMultipartFormDataSchema.

    :ivar file: File as binary data blob.
    :vartype file: IO
    :ivar identifier: Unique identifier for the document. If creating a document and left blank,
     one will be automatically generated.
    :vartype identifier: str
    :ivar file_name: Optional filename of the file.
    :vartype file_name: str
    :ivar url: URL to file to download and process.
    :vartype url: str
    :ivar language: Language code in ISO 639-1 format. Must specify zh-cn or zh-tw for Chinese.
    :vartype language: str
    :ivar wait: If "true" (default), will return a response only after processing has completed. If
     "false", will return an empty data object which can be polled at the GET endpoint until
     processing is complete.
    :vartype wait: bool
    :ivar redact_headshot: Whether to redact headshot.
    :vartype redact_headshot: bool
    :ivar redact_personal_details: Whether to redact personal details (e.g. name, address).
    :vartype redact_personal_details: bool
    :ivar redact_work_details: Whether to redact work details (e.g. company names).
    :vartype redact_work_details: bool
    :ivar redact_education_details: Whether to redact education details (e.g. university names).
    :vartype redact_education_details: bool
    :ivar redact_referees: Whether to redact referee details.
    :vartype redact_referees: bool
    :ivar redact_locations: Whether to redact location names.
    :vartype redact_locations: bool
    :ivar redact_dates: Whether to redact dates.
    :vartype redact_dates: bool
    :ivar expiry_time: The date/time in ISO-8601 format when the document will be automatically
     deleted.  Defaults to no expiry.
    :vartype expiry_time: str
    """

    _attribute_map = {
        "file": {"key": "file", "type": "IO"},
        "identifier": {"key": "identifier", "type": "str"},
        "file_name": {"key": "fileName", "type": "str"},
        "url": {"key": "url", "type": "str"},
        "language": {"key": "language", "type": "str"},
        "wait": {"key": "wait", "type": "bool"},
        "redact_headshot": {"key": "redactHeadshot", "type": "bool"},
        "redact_personal_details": {"key": "redactPersonalDetails", "type": "bool"},
        "redact_work_details": {"key": "redactWorkDetails", "type": "bool"},
        "redact_education_details": {"key": "redactEducationDetails", "type": "bool"},
        "redact_referees": {"key": "redactReferees", "type": "bool"},
        "redact_locations": {"key": "redactLocations", "type": "bool"},
        "redact_dates": {"key": "redactDates", "type": "bool"},
        "expiry_time": {"key": "expiryTime", "type": "str"},
    }

    def __init__(
        self,
        *,
        file: Optional[IO] = None,
        identifier: Optional[str] = None,
        file_name: Optional[str] = None,
        url: Optional[str] = None,
        language: Optional[str] = None,
        wait: Optional[bool] = True,
        redact_headshot: Optional[bool] = True,
        redact_personal_details: Optional[bool] = True,
        redact_work_details: Optional[bool] = True,
        redact_education_details: Optional[bool] = True,
        redact_referees: Optional[bool] = True,
        redact_locations: Optional[bool] = True,
        redact_dates: Optional[bool] = True,
        expiry_time: Optional[str] = None,
        **kwargs,
    ):
        """
        :keyword file: File as binary data blob.
        :paramtype file: IO
        :keyword identifier: Unique identifier for the document. If creating a document and left blank,
         one will be automatically generated.
        :paramtype identifier: str
        :keyword file_name: Optional filename of the file.
        :paramtype file_name: str
        :keyword url: URL to file to download and process.
        :paramtype url: str
        :keyword language: Language code in ISO 639-1 format. Must specify zh-cn or zh-tw for Chinese.
        :paramtype language: str
        :keyword wait: If "true" (default), will return a response only after processing has completed.
         If "false", will return an empty data object which can be polled at the GET endpoint until
         processing is complete.
        :paramtype wait: bool
        :keyword redact_headshot: Whether to redact headshot.
        :paramtype redact_headshot: bool
        :keyword redact_personal_details: Whether to redact personal details (e.g. name, address).
        :paramtype redact_personal_details: bool
        :keyword redact_work_details: Whether to redact work details (e.g. company names).
        :paramtype redact_work_details: bool
        :keyword redact_education_details: Whether to redact education details (e.g. university names).
        :paramtype redact_education_details: bool
        :keyword redact_referees: Whether to redact referee details.
        :paramtype redact_referees: bool
        :keyword redact_locations: Whether to redact location names.
        :paramtype redact_locations: bool
        :keyword redact_dates: Whether to redact dates.
        :paramtype redact_dates: bool
        :keyword expiry_time: The date/time in ISO-8601 format when the document will be automatically
         deleted.  Defaults to no expiry.
        :paramtype expiry_time: str
        """
        super(
            Paths8DdhfcRedactedResumesPostRequestbodyContentMultipartFormDataSchema, self
        ).__init__(**kwargs)
        self.file = file
        self.identifier = identifier
        self.file_name = file_name
        self.url = url
        self.language = language
        self.wait = wait
        self.redact_headshot = redact_headshot
        self.redact_personal_details = redact_personal_details
        self.redact_work_details = redact_work_details
        self.redact_education_details = redact_education_details
        self.redact_referees = redact_referees
        self.redact_locations = redact_locations
        self.redact_dates = redact_dates
        self.expiry_time = expiry_time


class PathsYzn84IReformattedResumesPostRequestbodyContentMultipartFormDataSchema(
    msrest.serialization.Model
):
    """PathsYzn84IReformattedResumesPostRequestbodyContentMultipartFormDataSchema.

    All required parameters must be populated in order to send to Azure.

    :ivar file: File as binary data blob.
    :vartype file: IO
    :ivar identifier: Unique identifier for the document. If creating a document and left blank,
     one will be automatically generated.
    :vartype identifier: str
    :ivar file_name: Optional filename of the file.
    :vartype file_name: str
    :ivar url: URL to file to download and process.
    :vartype url: str
    :ivar language: Language code in ISO 639-1 format. Must specify zh-cn or zh-tw for Chinese.
    :vartype language: str
    :ivar resume_format: Required. Identifier of the format used.
    :vartype resume_format: str
    :ivar wait: If "true" (default), will return a response only after processing has completed. If
     "false", will return an empty data object which can be polled at the GET endpoint until
     processing is complete.
    :vartype wait: bool
    """

    _validation = {
        "resume_format": {"required": True},
    }

    _attribute_map = {
        "file": {"key": "file", "type": "IO"},
        "identifier": {"key": "identifier", "type": "str"},
        "file_name": {"key": "fileName", "type": "str"},
        "url": {"key": "url", "type": "str"},
        "language": {"key": "language", "type": "str"},
        "resume_format": {"key": "resumeFormat", "type": "str"},
        "wait": {"key": "wait", "type": "bool"},
    }

    def __init__(
        self,
        *,
        resume_format: str,
        file: Optional[IO] = None,
        identifier: Optional[str] = None,
        file_name: Optional[str] = None,
        url: Optional[str] = None,
        language: Optional[str] = None,
        wait: Optional[bool] = True,
        **kwargs,
    ):
        """
        :keyword file: File as binary data blob.
        :paramtype file: IO
        :keyword identifier: Unique identifier for the document. If creating a document and left blank,
         one will be automatically generated.
        :paramtype identifier: str
        :keyword file_name: Optional filename of the file.
        :paramtype file_name: str
        :keyword url: URL to file to download and process.
        :paramtype url: str
        :keyword language: Language code in ISO 639-1 format. Must specify zh-cn or zh-tw for Chinese.
        :paramtype language: str
        :keyword resume_format: Required. Identifier of the format used.
        :paramtype resume_format: str
        :keyword wait: If "true" (default), will return a response only after processing has completed.
         If "false", will return an empty data object which can be polled at the GET endpoint until
         processing is complete.
        :paramtype wait: bool
        """
        super(
            PathsYzn84IReformattedResumesPostRequestbodyContentMultipartFormDataSchema, self
        ).__init__(**kwargs)
        self.file = file
        self.identifier = identifier
        self.file_name = file_name
        self.url = url
        self.language = language
        self.resume_format = resume_format
        self.wait = wait


class RedactedResume(msrest.serialization.Model):
    """RedactedResume.

    All required parameters must be populated in order to send to Azure.

    :ivar data: Required.
    :vartype data: ~affinda.models.RedactedResumeData
    :ivar meta: Required.
    :vartype meta: ~affinda.models.Meta
    :ivar error: Required.
    :vartype error: ~affinda.models.Error
    """

    _validation = {
        "data": {"required": True},
        "meta": {"required": True},
        "error": {"required": True},
    }

    _attribute_map = {
        "data": {"key": "data", "type": "RedactedResumeData"},
        "meta": {"key": "meta", "type": "Meta"},
        "error": {"key": "error", "type": "Error"},
    }

    def __init__(self, *, data: "RedactedResumeData", meta: "Meta", error: "Error", **kwargs):
        """
        :keyword data: Required.
        :paramtype data: ~affinda.models.RedactedResumeData
        :keyword meta: Required.
        :paramtype meta: ~affinda.models.Meta
        :keyword error: Required.
        :paramtype error: ~affinda.models.Error
        """
        super(RedactedResume, self).__init__(**kwargs)
        self.data = data
        self.meta = meta
        self.error = error


class RedactedResumeData(msrest.serialization.Model):
    """RedactedResumeData.

    :ivar redacted_pdf: URL to redacted PDF.
    :vartype redacted_pdf: str
    """

    _attribute_map = {
        "redacted_pdf": {"key": "redactedPdf", "type": "str"},
    }

    def __init__(self, *, redacted_pdf: Optional[str] = None, **kwargs):
        """
        :keyword redacted_pdf: URL to redacted PDF.
        :paramtype redacted_pdf: str
        """
        super(RedactedResumeData, self).__init__(**kwargs)
        self.redacted_pdf = redacted_pdf


class ReformattedResume(msrest.serialization.Model):
    """ReformattedResume.

    All required parameters must be populated in order to send to Azure.

    :ivar data: Required.
    :vartype data: ~affinda.models.ReformattedResumeData
    :ivar meta: Required.
    :vartype meta: ~affinda.models.Meta
    :ivar error: Required.
    :vartype error: ~affinda.models.Error
    """

    _validation = {
        "data": {"required": True},
        "meta": {"required": True},
        "error": {"required": True},
    }

    _attribute_map = {
        "data": {"key": "data", "type": "ReformattedResumeData"},
        "meta": {"key": "meta", "type": "Meta"},
        "error": {"key": "error", "type": "Error"},
    }

    def __init__(self, *, data: "ReformattedResumeData", meta: "Meta", error: "Error", **kwargs):
        """
        :keyword data: Required.
        :paramtype data: ~affinda.models.ReformattedResumeData
        :keyword meta: Required.
        :paramtype meta: ~affinda.models.Meta
        :keyword error: Required.
        :paramtype error: ~affinda.models.Error
        """
        super(ReformattedResume, self).__init__(**kwargs)
        self.data = data
        self.meta = meta
        self.error = error


class ReformattedResumeData(msrest.serialization.Model):
    """ReformattedResumeData.

    :ivar reformatted_file:
    :vartype reformatted_file: str
    """

    _attribute_map = {
        "reformatted_file": {"key": "reformattedFile", "type": "str"},
    }

    def __init__(self, *, reformatted_file: Optional[str] = None, **kwargs):
        """
        :keyword reformatted_file:
        :paramtype reformatted_file: str
        """
        super(ReformattedResumeData, self).__init__(**kwargs)
        self.reformatted_file = reformatted_file


class RequestError(msrest.serialization.Model):
    """RequestError.

    All required parameters must be populated in order to send to Azure.

    :ivar detail: Required.
    :vartype detail: str
    :ivar status_code: Required.
    :vartype status_code: int
    """

    _validation = {
        "detail": {"required": True},
        "status_code": {"required": True},
    }

    _attribute_map = {
        "detail": {"key": "detail", "type": "str"},
        "status_code": {"key": "statusCode", "type": "int"},
    }

    def __init__(self, *, detail: str, status_code: int, **kwargs):
        """
        :keyword detail: Required.
        :paramtype detail: str
        :keyword status_code: Required.
        :paramtype status_code: int
        """
        super(RequestError, self).__init__(**kwargs)
        self.detail = detail
        self.status_code = status_code


class Resume(msrest.serialization.Model):
    """Resume.

    All required parameters must be populated in order to send to Azure.

    :ivar data: Required.
    :vartype data: ~affinda.models.ResumeData
    :ivar meta: Required.
    :vartype meta: ~affinda.models.Meta
    :ivar error: Required.
    :vartype error: ~affinda.models.Error
    """

    _validation = {
        "data": {"required": True},
        "meta": {"required": True},
        "error": {"required": True},
    }

    _attribute_map = {
        "data": {"key": "data", "type": "ResumeData"},
        "meta": {"key": "meta", "type": "Meta"},
        "error": {"key": "error", "type": "Error"},
    }

    def __init__(self, *, data: "ResumeData", meta: "Meta", error: "Error", **kwargs):
        """
        :keyword data: Required.
        :paramtype data: ~affinda.models.ResumeData
        :keyword meta: Required.
        :paramtype meta: ~affinda.models.Meta
        :keyword error: Required.
        :paramtype error: ~affinda.models.Error
        """
        super(Resume, self).__init__(**kwargs)
        self.data = data
        self.meta = meta
        self.error = error


class ResumeData(msrest.serialization.Model):
    """ResumeData.

    :ivar name:
    :vartype name: ~affinda.models.ResumeDataName
    :ivar phone_numbers:
    :vartype phone_numbers: list[str]
    :ivar websites:
    :vartype websites: list[str]
    :ivar emails:
    :vartype emails: list[str]
    :ivar date_of_birth:
    :vartype date_of_birth: str
    :ivar location:
    :vartype location: ~affinda.models.Location
    :ivar objective:
    :vartype objective: str
    :ivar languages:
    :vartype languages: list[str]
    :ivar summary:
    :vartype summary: str
    :ivar total_years_experience:
    :vartype total_years_experience: int
    :ivar head_shot: base64 encoded string.
    :vartype head_shot: bytearray
    :ivar education:
    :vartype education: list[~affinda.models.ResumeDataEducationItem]
    :ivar profession: Prediction of the candidate's profession based on recent work experience.
    :vartype profession: str
    :ivar linkedin: Linkedin account associated with the candidate.
    :vartype linkedin: str
    :ivar work_experience:
    :vartype work_experience: list[~affinda.models.ResumeDataWorkExperienceItem]
    :ivar skills:
    :vartype skills: list[~affinda.models.ResumeDataSkillsItem]
    :ivar certifications:
    :vartype certifications: list[str]
    :ivar publications:
    :vartype publications: list[str]
    :ivar referees:
    :vartype referees: list[~affinda.models.ResumeDataRefereesItem]
    :ivar sections:
    :vartype sections: list[~affinda.models.ResumeDataSectionsItem]
    :ivar is_resume_probability: Probability that the given document is a resume. Values below 30
     suggest that the document is not a resume.
    :vartype is_resume_probability: int
    :ivar raw_text: All of the raw text of the parsed resume, example is shortened for readiblity.
    :vartype raw_text: str
    """

    _attribute_map = {
        "name": {"key": "name", "type": "ResumeDataName"},
        "phone_numbers": {"key": "phoneNumbers", "type": "[str]"},
        "websites": {"key": "websites", "type": "[str]"},
        "emails": {"key": "emails", "type": "[str]"},
        "date_of_birth": {"key": "dateOfBirth", "type": "str"},
        "location": {"key": "location", "type": "Location"},
        "objective": {"key": "objective", "type": "str"},
        "languages": {"key": "languages", "type": "[str]"},
        "summary": {"key": "summary", "type": "str"},
        "total_years_experience": {"key": "totalYearsExperience", "type": "int"},
        "head_shot": {"key": "headShot", "type": "bytearray"},
        "education": {"key": "education", "type": "[ResumeDataEducationItem]"},
        "profession": {"key": "profession", "type": "str"},
        "linkedin": {"key": "linkedin", "type": "str"},
        "work_experience": {"key": "workExperience", "type": "[ResumeDataWorkExperienceItem]"},
        "skills": {"key": "skills", "type": "[ResumeDataSkillsItem]"},
        "certifications": {"key": "certifications", "type": "[str]"},
        "publications": {"key": "publications", "type": "[str]"},
        "referees": {"key": "referees", "type": "[ResumeDataRefereesItem]"},
        "sections": {"key": "sections", "type": "[ResumeDataSectionsItem]"},
        "is_resume_probability": {"key": "isResumeProbability", "type": "int"},
        "raw_text": {"key": "rawText", "type": "str"},
    }

    def __init__(
        self,
        *,
        name: Optional["ResumeDataName"] = None,
        phone_numbers: Optional[List[str]] = None,
        websites: Optional[List[str]] = None,
        emails: Optional[List[str]] = None,
        date_of_birth: Optional[str] = None,
        location: Optional["Location"] = None,
        objective: Optional[str] = None,
        languages: Optional[List[str]] = None,
        summary: Optional[str] = None,
        total_years_experience: Optional[int] = None,
        head_shot: Optional[bytearray] = None,
        education: Optional[List["ResumeDataEducationItem"]] = None,
        profession: Optional[str] = None,
        linkedin: Optional[str] = None,
        work_experience: Optional[List["ResumeDataWorkExperienceItem"]] = None,
        skills: Optional[List["ResumeDataSkillsItem"]] = None,
        certifications: Optional[List[str]] = None,
        publications: Optional[List[str]] = None,
        referees: Optional[List["ResumeDataRefereesItem"]] = None,
        sections: Optional[List["ResumeDataSectionsItem"]] = None,
        is_resume_probability: Optional[int] = None,
        raw_text: Optional[str] = None,
        **kwargs,
    ):
        """
        :keyword name:
        :paramtype name: ~affinda.models.ResumeDataName
        :keyword phone_numbers:
        :paramtype phone_numbers: list[str]
        :keyword websites:
        :paramtype websites: list[str]
        :keyword emails:
        :paramtype emails: list[str]
        :keyword date_of_birth:
        :paramtype date_of_birth: str
        :keyword location:
        :paramtype location: ~affinda.models.Location
        :keyword objective:
        :paramtype objective: str
        :keyword languages:
        :paramtype languages: list[str]
        :keyword summary:
        :paramtype summary: str
        :keyword total_years_experience:
        :paramtype total_years_experience: int
        :keyword head_shot: base64 encoded string.
        :paramtype head_shot: bytearray
        :keyword education:
        :paramtype education: list[~affinda.models.ResumeDataEducationItem]
        :keyword profession: Prediction of the candidate's profession based on recent work experience.
        :paramtype profession: str
        :keyword linkedin: Linkedin account associated with the candidate.
        :paramtype linkedin: str
        :keyword work_experience:
        :paramtype work_experience: list[~affinda.models.ResumeDataWorkExperienceItem]
        :keyword skills:
        :paramtype skills: list[~affinda.models.ResumeDataSkillsItem]
        :keyword certifications:
        :paramtype certifications: list[str]
        :keyword publications:
        :paramtype publications: list[str]
        :keyword referees:
        :paramtype referees: list[~affinda.models.ResumeDataRefereesItem]
        :keyword sections:
        :paramtype sections: list[~affinda.models.ResumeDataSectionsItem]
        :keyword is_resume_probability: Probability that the given document is a resume. Values below
         30 suggest that the document is not a resume.
        :paramtype is_resume_probability: int
        :keyword raw_text: All of the raw text of the parsed resume, example is shortened for
         readiblity.
        :paramtype raw_text: str
        """
        super(ResumeData, self).__init__(**kwargs)
        self.name = name
        self.phone_numbers = phone_numbers
        self.websites = websites
        self.emails = emails
        self.date_of_birth = date_of_birth
        self.location = location
        self.objective = objective
        self.languages = languages
        self.summary = summary
        self.total_years_experience = total_years_experience
        self.head_shot = head_shot
        self.education = education
        self.profession = profession
        self.linkedin = linkedin
        self.work_experience = work_experience
        self.skills = skills
        self.certifications = certifications
        self.publications = publications
        self.referees = referees
        self.sections = sections
        self.is_resume_probability = is_resume_probability
        self.raw_text = raw_text


class ResumeDataEducationItem(msrest.serialization.Model):
    """ResumeDataEducationItem.

    :ivar organization:
    :vartype organization: str
    :ivar accreditation:
    :vartype accreditation: ~affinda.models.ResumeDataEducationItemAccreditation
    :ivar grade:
    :vartype grade: ~affinda.models.ResumeDataEducationItemGrade
    :ivar location:
    :vartype location: ~affinda.models.Location
    :ivar dates:
    :vartype dates: ~affinda.models.ResumeDataEducationItemDates
    """

    _attribute_map = {
        "organization": {"key": "organization", "type": "str"},
        "accreditation": {"key": "accreditation", "type": "ResumeDataEducationItemAccreditation"},
        "grade": {"key": "grade", "type": "ResumeDataEducationItemGrade"},
        "location": {"key": "location", "type": "Location"},
        "dates": {"key": "dates", "type": "ResumeDataEducationItemDates"},
    }

    def __init__(
        self,
        *,
        organization: Optional[str] = None,
        accreditation: Optional["ResumeDataEducationItemAccreditation"] = None,
        grade: Optional["ResumeDataEducationItemGrade"] = None,
        location: Optional["Location"] = None,
        dates: Optional["ResumeDataEducationItemDates"] = None,
        **kwargs,
    ):
        """
        :keyword organization:
        :paramtype organization: str
        :keyword accreditation:
        :paramtype accreditation: ~affinda.models.ResumeDataEducationItemAccreditation
        :keyword grade:
        :paramtype grade: ~affinda.models.ResumeDataEducationItemGrade
        :keyword location:
        :paramtype location: ~affinda.models.Location
        :keyword dates:
        :paramtype dates: ~affinda.models.ResumeDataEducationItemDates
        """
        super(ResumeDataEducationItem, self).__init__(**kwargs)
        self.organization = organization
        self.accreditation = accreditation
        self.grade = grade
        self.location = location
        self.dates = dates


class ResumeDataEducationItemAccreditation(msrest.serialization.Model):
    """ResumeDataEducationItemAccreditation.

    :ivar education:
    :vartype education: str
    :ivar input_str:
    :vartype input_str: str
    :ivar match_str:
    :vartype match_str: str
    :ivar education_level:
    :vartype education_level: str
    """

    _attribute_map = {
        "education": {"key": "education", "type": "str"},
        "input_str": {"key": "inputStr", "type": "str"},
        "match_str": {"key": "matchStr", "type": "str"},
        "education_level": {"key": "educationLevel", "type": "str"},
    }

    def __init__(
        self,
        *,
        education: Optional[str] = None,
        input_str: Optional[str] = None,
        match_str: Optional[str] = None,
        education_level: Optional[str] = None,
        **kwargs,
    ):
        """
        :keyword education:
        :paramtype education: str
        :keyword input_str:
        :paramtype input_str: str
        :keyword match_str:
        :paramtype match_str: str
        :keyword education_level:
        :paramtype education_level: str
        """
        super(ResumeDataEducationItemAccreditation, self).__init__(**kwargs)
        self.education = education
        self.input_str = input_str
        self.match_str = match_str
        self.education_level = education_level


class ResumeDataEducationItemDates(msrest.serialization.Model):
    """ResumeDataEducationItemDates.

    :ivar completion_date:
    :vartype completion_date: ~datetime.date
    :ivar is_current:
    :vartype is_current: bool
    :ivar start_date:
    :vartype start_date: ~datetime.date
    """

    _attribute_map = {
        "completion_date": {"key": "completionDate", "type": "date"},
        "is_current": {"key": "isCurrent", "type": "bool"},
        "start_date": {"key": "startDate", "type": "date"},
    }

    def __init__(
        self,
        *,
        completion_date: Optional[datetime.date] = None,
        is_current: Optional[bool] = None,
        start_date: Optional[datetime.date] = None,
        **kwargs,
    ):
        """
        :keyword completion_date:
        :paramtype completion_date: ~datetime.date
        :keyword is_current:
        :paramtype is_current: bool
        :keyword start_date:
        :paramtype start_date: ~datetime.date
        """
        super(ResumeDataEducationItemDates, self).__init__(**kwargs)
        self.completion_date = completion_date
        self.is_current = is_current
        self.start_date = start_date


class ResumeDataEducationItemGrade(msrest.serialization.Model):
    """ResumeDataEducationItemGrade.

    :ivar raw:
    :vartype raw: str
    :ivar metric:
    :vartype metric: str
    :ivar value:
    :vartype value: str
    """

    _attribute_map = {
        "raw": {"key": "raw", "type": "str"},
        "metric": {"key": "metric", "type": "str"},
        "value": {"key": "value", "type": "str"},
    }

    def __init__(
        self,
        *,
        raw: Optional[str] = None,
        metric: Optional[str] = None,
        value: Optional[str] = None,
        **kwargs,
    ):
        """
        :keyword raw:
        :paramtype raw: str
        :keyword metric:
        :paramtype metric: str
        :keyword value:
        :paramtype value: str
        """
        super(ResumeDataEducationItemGrade, self).__init__(**kwargs)
        self.raw = raw
        self.metric = metric
        self.value = value


class ResumeDataName(msrest.serialization.Model):
    """ResumeDataName.

    :ivar raw:
    :vartype raw: str
    :ivar first:
    :vartype first: str
    :ivar last:
    :vartype last: str
    :ivar middle:
    :vartype middle: str
    :ivar title:
    :vartype title: str
    """

    _attribute_map = {
        "raw": {"key": "raw", "type": "str"},
        "first": {"key": "first", "type": "str"},
        "last": {"key": "last", "type": "str"},
        "middle": {"key": "middle", "type": "str"},
        "title": {"key": "title", "type": "str"},
    }

    def __init__(
        self,
        *,
        raw: Optional[str] = None,
        first: Optional[str] = None,
        last: Optional[str] = None,
        middle: Optional[str] = None,
        title: Optional[str] = None,
        **kwargs,
    ):
        """
        :keyword raw:
        :paramtype raw: str
        :keyword first:
        :paramtype first: str
        :keyword last:
        :paramtype last: str
        :keyword middle:
        :paramtype middle: str
        :keyword title:
        :paramtype title: str
        """
        super(ResumeDataName, self).__init__(**kwargs)
        self.raw = raw
        self.first = first
        self.last = last
        self.middle = middle
        self.title = title


class ResumeDataRefereesItem(msrest.serialization.Model):
    """ResumeDataRefereesItem.

    :ivar name:
    :vartype name: str
    :ivar text:
    :vartype text: str
    :ivar email:
    :vartype email: str
    :ivar number:
    :vartype number: str
    """

    _attribute_map = {
        "name": {"key": "name", "type": "str"},
        "text": {"key": "text", "type": "str"},
        "email": {"key": "email", "type": "str"},
        "number": {"key": "number", "type": "str"},
    }

    def __init__(
        self,
        *,
        name: Optional[str] = None,
        text: Optional[str] = None,
        email: Optional[str] = None,
        number: Optional[str] = None,
        **kwargs,
    ):
        """
        :keyword name:
        :paramtype name: str
        :keyword text:
        :paramtype text: str
        :keyword email:
        :paramtype email: str
        :keyword number:
        :paramtype number: str
        """
        super(ResumeDataRefereesItem, self).__init__(**kwargs)
        self.name = name
        self.text = text
        self.email = email
        self.number = number


class ResumeDataSectionsItem(msrest.serialization.Model):
    """ResumeDataSectionsItem.

    :ivar section_type:
    :vartype section_type: str
    :ivar bbox:
    :vartype bbox: list[float]
    :ivar page_index:
    :vartype page_index: int
    :ivar text:
    :vartype text: str
    """

    _validation = {
        "bbox": {"max_items": 4, "min_items": 4},
    }

    _attribute_map = {
        "section_type": {"key": "sectionType", "type": "str"},
        "bbox": {"key": "bbox", "type": "[float]"},
        "page_index": {"key": "pageIndex", "type": "int"},
        "text": {"key": "text", "type": "str"},
    }

    def __init__(
        self,
        *,
        section_type: Optional[str] = None,
        bbox: Optional[List[float]] = None,
        page_index: Optional[int] = None,
        text: Optional[str] = None,
        **kwargs,
    ):
        """
        :keyword section_type:
        :paramtype section_type: str
        :keyword bbox:
        :paramtype bbox: list[float]
        :keyword page_index:
        :paramtype page_index: int
        :keyword text:
        :paramtype text: str
        """
        super(ResumeDataSectionsItem, self).__init__(**kwargs)
        self.section_type = section_type
        self.bbox = bbox
        self.page_index = page_index
        self.text = text


class ResumeDataSkillsItem(msrest.serialization.Model):
    """ResumeDataSkillsItem.

    :ivar name:
    :vartype name: str
    :ivar last_used:
    :vartype last_used: str
    :ivar number_of_months:
    :vartype number_of_months: int
    :ivar type:
    :vartype type: str
    :ivar sources:
    :vartype sources: list[~affinda.models.ResumeDataSkillsPropertiesItemsItem]
    """

    _attribute_map = {
        "name": {"key": "name", "type": "str"},
        "last_used": {"key": "lastUsed", "type": "str"},
        "number_of_months": {"key": "numberOfMonths", "type": "int"},
        "type": {"key": "type", "type": "str"},
        "sources": {"key": "sources", "type": "[ResumeDataSkillsPropertiesItemsItem]"},
    }

    def __init__(
        self,
        *,
        name: Optional[str] = None,
        last_used: Optional[str] = None,
        number_of_months: Optional[int] = None,
        type: Optional[str] = None,
        sources: Optional[List["ResumeDataSkillsPropertiesItemsItem"]] = None,
        **kwargs,
    ):
        """
        :keyword name:
        :paramtype name: str
        :keyword last_used:
        :paramtype last_used: str
        :keyword number_of_months:
        :paramtype number_of_months: int
        :keyword type:
        :paramtype type: str
        :keyword sources:
        :paramtype sources: list[~affinda.models.ResumeDataSkillsPropertiesItemsItem]
        """
        super(ResumeDataSkillsItem, self).__init__(**kwargs)
        self.name = name
        self.last_used = last_used
        self.number_of_months = number_of_months
        self.type = type
        self.sources = sources


class ResumeDataSkillsPropertiesItemsItem(msrest.serialization.Model):
    """ResumeDataSkillsPropertiesItemsItem.

    :ivar section:
    :vartype section: str
    :ivar position:
    :vartype position: int
    """

    _attribute_map = {
        "section": {"key": "section", "type": "str"},
        "position": {"key": "position", "type": "int"},
    }

    def __init__(self, *, section: Optional[str] = None, position: Optional[int] = None, **kwargs):
        """
        :keyword section:
        :paramtype section: str
        :keyword position:
        :paramtype position: int
        """
        super(ResumeDataSkillsPropertiesItemsItem, self).__init__(**kwargs)
        self.section = section
        self.position = position


class ResumeDataWorkExperienceItem(msrest.serialization.Model):
    """ResumeDataWorkExperienceItem.

    :ivar job_title:
    :vartype job_title: str
    :ivar organization:
    :vartype organization: str
    :ivar location:
    :vartype location: ~affinda.models.Location
    :ivar job_description:
    :vartype job_description: str
    :ivar dates:
    :vartype dates: ~affinda.models.ResumeDataWorkExperienceItemDates
    """

    _attribute_map = {
        "job_title": {"key": "jobTitle", "type": "str"},
        "organization": {"key": "organization", "type": "str"},
        "location": {"key": "location", "type": "Location"},
        "job_description": {"key": "jobDescription", "type": "str"},
        "dates": {"key": "dates", "type": "ResumeDataWorkExperienceItemDates"},
    }

    def __init__(
        self,
        *,
        job_title: Optional[str] = None,
        organization: Optional[str] = None,
        location: Optional["Location"] = None,
        job_description: Optional[str] = None,
        dates: Optional["ResumeDataWorkExperienceItemDates"] = None,
        **kwargs,
    ):
        """
        :keyword job_title:
        :paramtype job_title: str
        :keyword organization:
        :paramtype organization: str
        :keyword location:
        :paramtype location: ~affinda.models.Location
        :keyword job_description:
        :paramtype job_description: str
        :keyword dates:
        :paramtype dates: ~affinda.models.ResumeDataWorkExperienceItemDates
        """
        super(ResumeDataWorkExperienceItem, self).__init__(**kwargs)
        self.job_title = job_title
        self.organization = organization
        self.location = location
        self.job_description = job_description
        self.dates = dates


class ResumeDataWorkExperienceItemDates(msrest.serialization.Model):
    """ResumeDataWorkExperienceItemDates.

    :ivar start_date:
    :vartype start_date: ~datetime.date
    :ivar end_date:
    :vartype end_date: ~datetime.date
    :ivar months_in_position:
    :vartype months_in_position: int
    :ivar is_current:
    :vartype is_current: bool
    """

    _attribute_map = {
        "start_date": {"key": "startDate", "type": "date"},
        "end_date": {"key": "endDate", "type": "date"},
        "months_in_position": {"key": "monthsInPosition", "type": "int"},
        "is_current": {"key": "isCurrent", "type": "bool"},
    }

    def __init__(
        self,
        *,
        start_date: Optional[datetime.date] = None,
        end_date: Optional[datetime.date] = None,
        months_in_position: Optional[int] = None,
        is_current: Optional[bool] = None,
        **kwargs,
    ):
        """
        :keyword start_date:
        :paramtype start_date: ~datetime.date
        :keyword end_date:
        :paramtype end_date: ~datetime.date
        :keyword months_in_position:
        :paramtype months_in_position: int
        :keyword is_current:
        :paramtype is_current: bool
        """
        super(ResumeDataWorkExperienceItemDates, self).__init__(**kwargs)
        self.start_date = start_date
        self.end_date = end_date
        self.months_in_position = months_in_position
        self.is_current = is_current
